//
// This is a generated file, do not edit!
// Generated by R.swift, see https://github.com/mac-cain13/R.swift
//

import Foundation
import Rswift
import UIKit

/// This `R` struct is generated and contains references to static resources.
struct R: Rswift.Validatable {
  fileprivate static let applicationLocale = hostingBundle.preferredLocalizations.first.flatMap { Locale(identifier: $0) } ?? Locale.current
  fileprivate static let hostingBundle = Bundle(for: R.Class.self)

  /// Find first language and bundle for which the table exists
  fileprivate static func localeBundle(tableName: String, preferredLanguages: [String]) -> (Foundation.Locale, Foundation.Bundle)? {
    // Filter preferredLanguages to localizations, use first locale
    var languages = preferredLanguages
      .map { Locale(identifier: $0) }
      .prefix(1)
      .flatMap { locale -> [String] in
        if hostingBundle.localizations.contains(locale.identifier) {
          if let language = locale.languageCode, hostingBundle.localizations.contains(language) {
            return [locale.identifier, language]
          } else {
            return [locale.identifier]
          }
        } else if let language = locale.languageCode, hostingBundle.localizations.contains(language) {
          return [language]
        } else {
          return []
        }
      }

    // If there's no languages, use development language as backstop
    if languages.isEmpty {
      if let developmentLocalization = hostingBundle.developmentLocalization {
        languages = [developmentLocalization]
      }
    } else {
      // Insert Base as second item (between locale identifier and languageCode)
      languages.insert("Base", at: 1)

      // Add development language as backstop
      if let developmentLocalization = hostingBundle.developmentLocalization {
        languages.append(developmentLocalization)
      }
    }

    // Find first language for which table exists
    // Note: key might not exist in chosen language (in that case, key will be shown)
    for language in languages {
      if let lproj = hostingBundle.url(forResource: language, withExtension: "lproj"),
         let lbundle = Bundle(url: lproj)
      {
        let strings = lbundle.url(forResource: tableName, withExtension: "strings")
        let stringsdict = lbundle.url(forResource: tableName, withExtension: "stringsdict")

        if strings != nil || stringsdict != nil {
          return (Locale(identifier: language), lbundle)
        }
      }
    }

    // If table is available in main bundle, don't look for localized resources
    let strings = hostingBundle.url(forResource: tableName, withExtension: "strings", subdirectory: nil, localization: nil)
    let stringsdict = hostingBundle.url(forResource: tableName, withExtension: "stringsdict", subdirectory: nil, localization: nil)

    if strings != nil || stringsdict != nil {
      return (applicationLocale, hostingBundle)
    }

    // If table is not found for requested languages, key will be shown
    return nil
  }

  /// Load string from Info.plist file
  fileprivate static func infoPlistString(path: [String], key: String) -> String? {
    var dict = hostingBundle.infoDictionary
    for step in path {
      guard let obj = dict?[step] as? [String: Any] else { return nil }
      dict = obj
    }
    return dict?[key] as? String
  }

  static func validate() throws {
    try font.validate()
    try intern.validate()
  }

  #if os(iOS) || os(tvOS)
  /// This `R.storyboard` struct is generated, and contains static references to 1 storyboards.
  struct storyboard {
    /// Storyboard `LaunchScreen`.
    static let launchScreen = _R.storyboard.launchScreen()

    #if os(iOS) || os(tvOS)
    /// `UIStoryboard(name: "LaunchScreen", bundle: ...)`
    static func launchScreen(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.launchScreen)
    }
    #endif

    fileprivate init() {}
  }
  #endif

  /// This `R.color` struct is generated, and contains static references to 1 colors.
  struct color {
    /// Color `AccentColor`.
    static let accentColor = Rswift.ColorResource(bundle: R.hostingBundle, name: "AccentColor")

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "AccentColor", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func accentColor(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.accentColor, compatibleWith: traitCollection)
    }
    #endif

    #if os(watchOS)
    /// `UIColor(named: "AccentColor", bundle: ..., traitCollection: ...)`
    @available(watchOSApplicationExtension 4.0, *)
    static func accentColor(_: Void = ()) -> UIKit.UIColor? {
      return UIKit.UIColor(named: R.color.accentColor.name)
    }
    #endif

    fileprivate init() {}
  }

  /// This `R.file` struct is generated, and contains static references to 24 files.
  struct file {
    /// Resource file `NotoSansTC-Black.otf`.
    static let notoSansTCBlackOtf = Rswift.FileResource(bundle: R.hostingBundle, name: "NotoSansTC-Black", pathExtension: "otf")
    /// Resource file `NotoSansTC-Bold.otf`.
    static let notoSansTCBoldOtf = Rswift.FileResource(bundle: R.hostingBundle, name: "NotoSansTC-Bold", pathExtension: "otf")
    /// Resource file `NotoSansTC-Light.otf`.
    static let notoSansTCLightOtf = Rswift.FileResource(bundle: R.hostingBundle, name: "NotoSansTC-Light", pathExtension: "otf")
    /// Resource file `NotoSansTC-Medium.otf`.
    static let notoSansTCMediumOtf = Rswift.FileResource(bundle: R.hostingBundle, name: "NotoSansTC-Medium", pathExtension: "otf")
    /// Resource file `NotoSansTC-Regular.otf`.
    static let notoSansTCRegularOtf = Rswift.FileResource(bundle: R.hostingBundle, name: "NotoSansTC-Regular", pathExtension: "otf")
    /// Resource file `NotoSansTC-Thin.otf`.
    static let notoSansTCThinOtf = Rswift.FileResource(bundle: R.hostingBundle, name: "NotoSansTC-Thin", pathExtension: "otf")
    /// Resource file `Prompt-Black.ttf`.
    static let promptBlackTtf = Rswift.FileResource(bundle: R.hostingBundle, name: "Prompt-Black", pathExtension: "ttf")
    /// Resource file `Prompt-BlackItalic.ttf`.
    static let promptBlackItalicTtf = Rswift.FileResource(bundle: R.hostingBundle, name: "Prompt-BlackItalic", pathExtension: "ttf")
    /// Resource file `Prompt-Bold.ttf`.
    static let promptBoldTtf = Rswift.FileResource(bundle: R.hostingBundle, name: "Prompt-Bold", pathExtension: "ttf")
    /// Resource file `Prompt-BoldItalic.ttf`.
    static let promptBoldItalicTtf = Rswift.FileResource(bundle: R.hostingBundle, name: "Prompt-BoldItalic", pathExtension: "ttf")
    /// Resource file `Prompt-ExtraBold.ttf`.
    static let promptExtraBoldTtf = Rswift.FileResource(bundle: R.hostingBundle, name: "Prompt-ExtraBold", pathExtension: "ttf")
    /// Resource file `Prompt-ExtraBoldItalic.ttf`.
    static let promptExtraBoldItalicTtf = Rswift.FileResource(bundle: R.hostingBundle, name: "Prompt-ExtraBoldItalic", pathExtension: "ttf")
    /// Resource file `Prompt-ExtraLight.ttf`.
    static let promptExtraLightTtf = Rswift.FileResource(bundle: R.hostingBundle, name: "Prompt-ExtraLight", pathExtension: "ttf")
    /// Resource file `Prompt-ExtraLightItalic.ttf`.
    static let promptExtraLightItalicTtf = Rswift.FileResource(bundle: R.hostingBundle, name: "Prompt-ExtraLightItalic", pathExtension: "ttf")
    /// Resource file `Prompt-Italic.ttf`.
    static let promptItalicTtf = Rswift.FileResource(bundle: R.hostingBundle, name: "Prompt-Italic", pathExtension: "ttf")
    /// Resource file `Prompt-Light.ttf`.
    static let promptLightTtf = Rswift.FileResource(bundle: R.hostingBundle, name: "Prompt-Light", pathExtension: "ttf")
    /// Resource file `Prompt-LightItalic.ttf`.
    static let promptLightItalicTtf = Rswift.FileResource(bundle: R.hostingBundle, name: "Prompt-LightItalic", pathExtension: "ttf")
    /// Resource file `Prompt-Medium.ttf`.
    static let promptMediumTtf = Rswift.FileResource(bundle: R.hostingBundle, name: "Prompt-Medium", pathExtension: "ttf")
    /// Resource file `Prompt-MediumItalic.ttf`.
    static let promptMediumItalicTtf = Rswift.FileResource(bundle: R.hostingBundle, name: "Prompt-MediumItalic", pathExtension: "ttf")
    /// Resource file `Prompt-Regular.ttf`.
    static let promptRegularTtf = Rswift.FileResource(bundle: R.hostingBundle, name: "Prompt-Regular", pathExtension: "ttf")
    /// Resource file `Prompt-SemiBold.ttf`.
    static let promptSemiBoldTtf = Rswift.FileResource(bundle: R.hostingBundle, name: "Prompt-SemiBold", pathExtension: "ttf")
    /// Resource file `Prompt-SemiBoldItalic.ttf`.
    static let promptSemiBoldItalicTtf = Rswift.FileResource(bundle: R.hostingBundle, name: "Prompt-SemiBoldItalic", pathExtension: "ttf")
    /// Resource file `Prompt-Thin.ttf`.
    static let promptThinTtf = Rswift.FileResource(bundle: R.hostingBundle, name: "Prompt-Thin", pathExtension: "ttf")
    /// Resource file `Prompt-ThinItalic.ttf`.
    static let promptThinItalicTtf = Rswift.FileResource(bundle: R.hostingBundle, name: "Prompt-ThinItalic", pathExtension: "ttf")

    /// `bundle.url(forResource: "NotoSansTC-Black", withExtension: "otf")`
    static func notoSansTCBlackOtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.notoSansTCBlackOtf
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "NotoSansTC-Bold", withExtension: "otf")`
    static func notoSansTCBoldOtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.notoSansTCBoldOtf
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "NotoSansTC-Light", withExtension: "otf")`
    static func notoSansTCLightOtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.notoSansTCLightOtf
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "NotoSansTC-Medium", withExtension: "otf")`
    static func notoSansTCMediumOtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.notoSansTCMediumOtf
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "NotoSansTC-Regular", withExtension: "otf")`
    static func notoSansTCRegularOtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.notoSansTCRegularOtf
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "NotoSansTC-Thin", withExtension: "otf")`
    static func notoSansTCThinOtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.notoSansTCThinOtf
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "Prompt-Black", withExtension: "ttf")`
    static func promptBlackTtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.promptBlackTtf
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "Prompt-BlackItalic", withExtension: "ttf")`
    static func promptBlackItalicTtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.promptBlackItalicTtf
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "Prompt-Bold", withExtension: "ttf")`
    static func promptBoldTtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.promptBoldTtf
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "Prompt-BoldItalic", withExtension: "ttf")`
    static func promptBoldItalicTtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.promptBoldItalicTtf
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "Prompt-ExtraBold", withExtension: "ttf")`
    static func promptExtraBoldTtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.promptExtraBoldTtf
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "Prompt-ExtraBoldItalic", withExtension: "ttf")`
    static func promptExtraBoldItalicTtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.promptExtraBoldItalicTtf
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "Prompt-ExtraLight", withExtension: "ttf")`
    static func promptExtraLightTtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.promptExtraLightTtf
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "Prompt-ExtraLightItalic", withExtension: "ttf")`
    static func promptExtraLightItalicTtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.promptExtraLightItalicTtf
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "Prompt-Italic", withExtension: "ttf")`
    static func promptItalicTtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.promptItalicTtf
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "Prompt-Light", withExtension: "ttf")`
    static func promptLightTtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.promptLightTtf
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "Prompt-LightItalic", withExtension: "ttf")`
    static func promptLightItalicTtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.promptLightItalicTtf
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "Prompt-Medium", withExtension: "ttf")`
    static func promptMediumTtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.promptMediumTtf
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "Prompt-MediumItalic", withExtension: "ttf")`
    static func promptMediumItalicTtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.promptMediumItalicTtf
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "Prompt-Regular", withExtension: "ttf")`
    static func promptRegularTtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.promptRegularTtf
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "Prompt-SemiBold", withExtension: "ttf")`
    static func promptSemiBoldTtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.promptSemiBoldTtf
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "Prompt-SemiBoldItalic", withExtension: "ttf")`
    static func promptSemiBoldItalicTtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.promptSemiBoldItalicTtf
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "Prompt-Thin", withExtension: "ttf")`
    static func promptThinTtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.promptThinTtf
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "Prompt-ThinItalic", withExtension: "ttf")`
    static func promptThinItalicTtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.promptThinItalicTtf
      return fileResource.bundle.url(forResource: fileResource)
    }

    fileprivate init() {}
  }

  /// This `R.font` struct is generated, and contains static references to 24 fonts.
  struct font: Rswift.Validatable {
    /// Font `NotoSansTC-Black`.
    static let notoSansTCBlack = Rswift.FontResource(fontName: "NotoSansTC-Black")
    /// Font `NotoSansTC-Bold`.
    static let notoSansTCBold = Rswift.FontResource(fontName: "NotoSansTC-Bold")
    /// Font `NotoSansTC-Light`.
    static let notoSansTCLight = Rswift.FontResource(fontName: "NotoSansTC-Light")
    /// Font `NotoSansTC-Medium`.
    static let notoSansTCMedium = Rswift.FontResource(fontName: "NotoSansTC-Medium")
    /// Font `NotoSansTC-Regular`.
    static let notoSansTCRegular = Rswift.FontResource(fontName: "NotoSansTC-Regular")
    /// Font `NotoSansTC-Thin`.
    static let notoSansTCThin = Rswift.FontResource(fontName: "NotoSansTC-Thin")
    /// Font `Prompt-BlackItalic`.
    static let promptBlackItalic = Rswift.FontResource(fontName: "Prompt-BlackItalic")
    /// Font `Prompt-Black`.
    static let promptBlack = Rswift.FontResource(fontName: "Prompt-Black")
    /// Font `Prompt-BoldItalic`.
    static let promptBoldItalic = Rswift.FontResource(fontName: "Prompt-BoldItalic")
    /// Font `Prompt-Bold`.
    static let promptBold = Rswift.FontResource(fontName: "Prompt-Bold")
    /// Font `Prompt-ExtraBoldItalic`.
    static let promptExtraBoldItalic = Rswift.FontResource(fontName: "Prompt-ExtraBoldItalic")
    /// Font `Prompt-ExtraBold`.
    static let promptExtraBold = Rswift.FontResource(fontName: "Prompt-ExtraBold")
    /// Font `Prompt-ExtraLightItalic`.
    static let promptExtraLightItalic = Rswift.FontResource(fontName: "Prompt-ExtraLightItalic")
    /// Font `Prompt-ExtraLight`.
    static let promptExtraLight = Rswift.FontResource(fontName: "Prompt-ExtraLight")
    /// Font `Prompt-Italic`.
    static let promptItalic = Rswift.FontResource(fontName: "Prompt-Italic")
    /// Font `Prompt-LightItalic`.
    static let promptLightItalic = Rswift.FontResource(fontName: "Prompt-LightItalic")
    /// Font `Prompt-Light`.
    static let promptLight = Rswift.FontResource(fontName: "Prompt-Light")
    /// Font `Prompt-MediumItalic`.
    static let promptMediumItalic = Rswift.FontResource(fontName: "Prompt-MediumItalic")
    /// Font `Prompt-Medium`.
    static let promptMedium = Rswift.FontResource(fontName: "Prompt-Medium")
    /// Font `Prompt-Regular`.
    static let promptRegular = Rswift.FontResource(fontName: "Prompt-Regular")
    /// Font `Prompt-SemiBoldItalic`.
    static let promptSemiBoldItalic = Rswift.FontResource(fontName: "Prompt-SemiBoldItalic")
    /// Font `Prompt-SemiBold`.
    static let promptSemiBold = Rswift.FontResource(fontName: "Prompt-SemiBold")
    /// Font `Prompt-ThinItalic`.
    static let promptThinItalic = Rswift.FontResource(fontName: "Prompt-ThinItalic")
    /// Font `Prompt-Thin`.
    static let promptThin = Rswift.FontResource(fontName: "Prompt-Thin")

    /// `UIFont(name: "NotoSansTC-Black", size: ...)`
    static func notoSansTCBlack(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: notoSansTCBlack, size: size)
    }

    /// `UIFont(name: "NotoSansTC-Bold", size: ...)`
    static func notoSansTCBold(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: notoSansTCBold, size: size)
    }

    /// `UIFont(name: "NotoSansTC-Light", size: ...)`
    static func notoSansTCLight(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: notoSansTCLight, size: size)
    }

    /// `UIFont(name: "NotoSansTC-Medium", size: ...)`
    static func notoSansTCMedium(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: notoSansTCMedium, size: size)
    }

    /// `UIFont(name: "NotoSansTC-Regular", size: ...)`
    static func notoSansTCRegular(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: notoSansTCRegular, size: size)
    }

    /// `UIFont(name: "NotoSansTC-Thin", size: ...)`
    static func notoSansTCThin(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: notoSansTCThin, size: size)
    }

    /// `UIFont(name: "Prompt-Black", size: ...)`
    static func promptBlack(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: promptBlack, size: size)
    }

    /// `UIFont(name: "Prompt-BlackItalic", size: ...)`
    static func promptBlackItalic(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: promptBlackItalic, size: size)
    }

    /// `UIFont(name: "Prompt-Bold", size: ...)`
    static func promptBold(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: promptBold, size: size)
    }

    /// `UIFont(name: "Prompt-BoldItalic", size: ...)`
    static func promptBoldItalic(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: promptBoldItalic, size: size)
    }

    /// `UIFont(name: "Prompt-ExtraBold", size: ...)`
    static func promptExtraBold(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: promptExtraBold, size: size)
    }

    /// `UIFont(name: "Prompt-ExtraBoldItalic", size: ...)`
    static func promptExtraBoldItalic(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: promptExtraBoldItalic, size: size)
    }

    /// `UIFont(name: "Prompt-ExtraLight", size: ...)`
    static func promptExtraLight(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: promptExtraLight, size: size)
    }

    /// `UIFont(name: "Prompt-ExtraLightItalic", size: ...)`
    static func promptExtraLightItalic(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: promptExtraLightItalic, size: size)
    }

    /// `UIFont(name: "Prompt-Italic", size: ...)`
    static func promptItalic(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: promptItalic, size: size)
    }

    /// `UIFont(name: "Prompt-Light", size: ...)`
    static func promptLight(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: promptLight, size: size)
    }

    /// `UIFont(name: "Prompt-LightItalic", size: ...)`
    static func promptLightItalic(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: promptLightItalic, size: size)
    }

    /// `UIFont(name: "Prompt-Medium", size: ...)`
    static func promptMedium(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: promptMedium, size: size)
    }

    /// `UIFont(name: "Prompt-MediumItalic", size: ...)`
    static func promptMediumItalic(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: promptMediumItalic, size: size)
    }

    /// `UIFont(name: "Prompt-Regular", size: ...)`
    static func promptRegular(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: promptRegular, size: size)
    }

    /// `UIFont(name: "Prompt-SemiBold", size: ...)`
    static func promptSemiBold(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: promptSemiBold, size: size)
    }

    /// `UIFont(name: "Prompt-SemiBoldItalic", size: ...)`
    static func promptSemiBoldItalic(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: promptSemiBoldItalic, size: size)
    }

    /// `UIFont(name: "Prompt-Thin", size: ...)`
    static func promptThin(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: promptThin, size: size)
    }

    /// `UIFont(name: "Prompt-ThinItalic", size: ...)`
    static func promptThinItalic(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: promptThinItalic, size: size)
    }

    static func validate() throws {
      if R.font.notoSansTCBlack(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'NotoSansTC-Black' could not be loaded, is 'NotoSansTC-Black.otf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.notoSansTCBold(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'NotoSansTC-Bold' could not be loaded, is 'NotoSansTC-Bold.otf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.notoSansTCLight(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'NotoSansTC-Light' could not be loaded, is 'NotoSansTC-Light.otf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.notoSansTCMedium(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'NotoSansTC-Medium' could not be loaded, is 'NotoSansTC-Medium.otf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.notoSansTCRegular(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'NotoSansTC-Regular' could not be loaded, is 'NotoSansTC-Regular.otf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.notoSansTCThin(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'NotoSansTC-Thin' could not be loaded, is 'NotoSansTC-Thin.otf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.promptBlack(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'Prompt-Black' could not be loaded, is 'Prompt-Black.ttf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.promptBlackItalic(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'Prompt-BlackItalic' could not be loaded, is 'Prompt-BlackItalic.ttf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.promptBold(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'Prompt-Bold' could not be loaded, is 'Prompt-Bold.ttf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.promptBoldItalic(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'Prompt-BoldItalic' could not be loaded, is 'Prompt-BoldItalic.ttf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.promptExtraBold(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'Prompt-ExtraBold' could not be loaded, is 'Prompt-ExtraBold.ttf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.promptExtraBoldItalic(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'Prompt-ExtraBoldItalic' could not be loaded, is 'Prompt-ExtraBoldItalic.ttf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.promptExtraLight(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'Prompt-ExtraLight' could not be loaded, is 'Prompt-ExtraLight.ttf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.promptExtraLightItalic(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'Prompt-ExtraLightItalic' could not be loaded, is 'Prompt-ExtraLightItalic.ttf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.promptItalic(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'Prompt-Italic' could not be loaded, is 'Prompt-Italic.ttf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.promptLight(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'Prompt-Light' could not be loaded, is 'Prompt-Light.ttf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.promptLightItalic(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'Prompt-LightItalic' could not be loaded, is 'Prompt-LightItalic.ttf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.promptMedium(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'Prompt-Medium' could not be loaded, is 'Prompt-Medium.ttf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.promptMediumItalic(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'Prompt-MediumItalic' could not be loaded, is 'Prompt-MediumItalic.ttf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.promptRegular(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'Prompt-Regular' could not be loaded, is 'Prompt-Regular.ttf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.promptSemiBold(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'Prompt-SemiBold' could not be loaded, is 'Prompt-SemiBold.ttf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.promptSemiBoldItalic(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'Prompt-SemiBoldItalic' could not be loaded, is 'Prompt-SemiBoldItalic.ttf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.promptThin(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'Prompt-Thin' could not be loaded, is 'Prompt-Thin.ttf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.promptThinItalic(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'Prompt-ThinItalic' could not be loaded, is 'Prompt-ThinItalic.ttf' added to the UIAppFonts array in this targets Info.plist?") }
    }

    fileprivate init() {}
  }

  /// This `R.image` struct is generated, and contains static references to 135 images.
  struct image {
    /// Image `Group 5031`.
    static let group5031 = Rswift.ImageResource(bundle: R.hostingBundle, name: "Group 5031")
    /// Image `bg_2`.
    static let bg_2 = Rswift.ImageResource(bundle: R.hostingBundle, name: "bg_2")
    /// Image `bg_3`.
    static let bg_3 = Rswift.ImageResource(bundle: R.hostingBundle, name: "bg_3")
    /// Image `bg_top_light`.
    static let bg_top_light = Rswift.ImageResource(bundle: R.hostingBundle, name: "bg_top_light")
    /// Image `btn_icon_pluse`.
    static let btn_icon_pluse = Rswift.ImageResource(bundle: R.hostingBundle, name: "btn_icon_pluse")
    /// Image `btn_social_media_facebook`.
    static let btn_social_media_facebook = Rswift.ImageResource(bundle: R.hostingBundle, name: "btn_social_media_facebook")
    /// Image `btn_social_media_github`.
    static let btn_social_media_github = Rswift.ImageResource(bundle: R.hostingBundle, name: "btn_social_media_github")
    /// Image `btn_social_media_ig`.
    static let btn_social_media_ig = Rswift.ImageResource(bundle: R.hostingBundle, name: "btn_social_media_ig")
    /// Image `btn_social_media_linkedin`.
    static let btn_social_media_linkedin = Rswift.ImageResource(bundle: R.hostingBundle, name: "btn_social_media_linkedin")
    /// Image `btn_social_media_twwiter`.
    static let btn_social_media_twwiter = Rswift.ImageResource(bundle: R.hostingBundle, name: "btn_social_media_twwiter")
    /// Image `btn_social_media_yt`.
    static let btn_social_media_yt = Rswift.ImageResource(bundle: R.hostingBundle, name: "btn_social_media_yt")
    /// Image `camera_circle_bg`.
    static let camera_circle_bg = Rswift.ImageResource(bundle: R.hostingBundle, name: "camera_circle_bg")
    /// Image `checkbox_selected`.
    static let checkbox_selected = Rswift.ImageResource(bundle: R.hostingBundle, name: "checkbox_selected")
    /// Image `checkbox`.
    static let checkbox = Rswift.ImageResource(bundle: R.hostingBundle, name: "checkbox")
    /// Image `edit_avatar`.
    static let edit_avatar = Rswift.ImageResource(bundle: R.hostingBundle, name: "edit_avatar")
    /// Image `half_gradient_from_bottom`.
    static let half_gradient_from_bottom = Rswift.ImageResource(bundle: R.hostingBundle, name: "half_gradient_from_bottom")
    /// Image `icon_Interest_camer`.
    static let icon_Interest_camer = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_Interest_camer")
    /// Image `icon_Interest_cooking`.
    static let icon_Interest_cooking = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_Interest_cooking")
    /// Image `icon_Interest_music`.
    static let icon_Interest_music = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_Interest_music")
    /// Image `icon_Interest_travel`.
    static let icon_Interest_travel = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_Interest_travel")
    /// Image `icon_add friend_2`.
    static let icon_addFriend_2 = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_add friend_2")
    /// Image `icon_arrow_2_down`.
    static let icon_arrow_2_down = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_arrow_2_down")
    /// Image `icon_arrow_2_right`.
    static let icon_arrow_2_right = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_arrow_2_right")
    /// Image `icon_arrow_3_right`.
    static let icon_arrow_3_right = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_arrow_3_right")
    /// Image `icon_arrow_left_w10_h16`.
    static let icon_arrow_left_w10_h16 = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_arrow_left_w10_h16")
    /// Image `icon_avatar`.
    static let icon_avatar = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_avatar")
    /// Image `icon_awesome_26`.
    static let icon_awesome_26 = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_awesome_26")
    /// Image `icon_birthday`.
    static let icon_birthday = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_birthday")
    /// Image `icon_bookmark_26`.
    static let icon_bookmark_26 = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_bookmark_26")
    /// Image `icon_bottom_bar_home_02_b_full`.
    static let icon_bottom_bar_home_02_b_full = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_bottom_bar_home_02_b_full")
    /// Image `icon_bottom_bar_home_02`.
    static let icon_bottom_bar_home_02 = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_bottom_bar_home_02")
    /// Image `icon_bottom_bar_member_b_full`.
    static let icon_bottom_bar_member_b_full = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_bottom_bar_member_b_full")
    /// Image `icon_bottom_bar_member`.
    static let icon_bottom_bar_member = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_bottom_bar_member")
    /// Image `icon_bottom_bar_s_bigcircle_02_b_full`.
    static let icon_bottom_bar_s_bigcircle_02_b_full = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_bottom_bar_s_bigcircle_02_b_full")
    /// Image `icon_bottom_bar_s_bigcircle_02`.
    static let icon_bottom_bar_s_bigcircle_02 = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_bottom_bar_s_bigcircle_02")
    /// Image `icon_bottom_bar_s_circle_02_b_full`.
    static let icon_bottom_bar_s_circle_02_b_full = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_bottom_bar_s_circle_02_b_full")
    /// Image `icon_bottom_bar_s_circle_02`.
    static let icon_bottom_bar_s_circle_02 = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_bottom_bar_s_circle_02")
    /// Image `icon_bottom_bar_s_message_02_b_full`.
    static let icon_bottom_bar_s_message_02_b_full = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_bottom_bar_s_message_02_b_full")
    /// Image `icon_bottom_bar_s_message_02`.
    static let icon_bottom_bar_s_message_02 = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_bottom_bar_s_message_02")
    /// Image `icon_btn_arrow_left_01_h30`.
    static let icon_btn_arrow_left_01_h30 = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_btn_arrow_left_01_h30")
    /// Image `icon_btn_eye_h30`.
    static let icon_btn_eye_h30 = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_btn_eye_h30")
    /// Image `icon_btn_pluss`.
    static let icon_btn_pluss = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_btn_pluss")
    /// Image `icon_btn_user`.
    static let icon_btn_user = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_btn_user")
    /// Image `icon_calendar_1`.
    static let icon_calendar_1 = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_calendar_1")
    /// Image `icon_calendar_2_s_white`.
    static let icon_calendar_2_s_white = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_calendar_2_s_white")
    /// Image `icon_camera`.
    static let icon_camera = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_camera")
    /// Image `icon_check_1`.
    static let icon_check_1 = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_check_1")
    /// Image `icon_check_round`.
    static let icon_check_round = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_check_round")
    /// Image `icon_close_1_w14`.
    static let icon_close_1_w14 = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_close_1_w14")
    /// Image `icon_coin_22`.
    static let icon_coin_22 = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_coin_22")
    /// Image `icon_colour_tick`.
    static let icon_colour_tick = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_colour_tick")
    /// Image `icon_down_01`.
    static let icon_down_01 = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_down_01")
    /// Image `icon_edit`.
    static let icon_edit = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_edit")
    /// Image `icon_error_1`.
    static let icon_error_1 = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_error_1")
    /// Image `icon_eyes_2`.
    static let icon_eyes_2 = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_eyes_2")
    /// Image `icon_eyes_3`.
    static let icon_eyes_3 = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_eyes_3")
    /// Image `icon_friends_line`.
    static let icon_friends_line = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_friends_line")
    /// Image `icon_gender_female`.
    static let icon_gender_female = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_gender_female")
    /// Image `icon_gender_male`.
    static let icon_gender_male = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_gender_male")
    /// Image `icon_gender_third`.
    static let icon_gender_third = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_gender_third")
    /// Image `icon_gift_line_26`.
    static let icon_gift_line_26 = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_gift_line_26")
    /// Image `icon_header_bell`.
    static let icon_header_bell = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_header_bell")
    /// Image `icon_landscape`.
    static let icon_landscape = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_landscape")
    /// Image `icon_medal_1`.
    static let icon_medal_1 = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_medal_1")
    /// Image `icon_medal_２`.
    static let icon_medal_２ = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_medal_２")
    /// Image `icon_member_11_help`.
    static let icon_member_11_help = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_member_11_help")
    /// Image `icon_member_12_setting`.
    static let icon_member_12_setting = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_member_12_setting")
    /// Image `icon_member_1_bigcircle`.
    static let icon_member_1_bigcircle = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_member_1_bigcircle")
    /// Image `icon_member_20_circle`.
    static let icon_member_20_circle = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_member_20_circle")
    /// Image `icon_member_3_bookmark`.
    static let icon_member_3_bookmark = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_member_3_bookmark")
    /// Image `icon_member_4_circle_volume`.
    static let icon_member_4_circle_volume = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_member_4_circle_volume")
    /// Image `icon_member_5_draft`.
    static let icon_member_5_draft = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_member_5_draft")
    /// Image `icon_member_6_history`.
    static let icon_member_6_history = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_member_6_history")
    /// Image `icon_member_7_tag`.
    static let icon_member_7_tag = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_member_7_tag")
    /// Image `icon_member_9_account`.
    static let icon_member_9_account = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_member_9_account")
    /// Image `icon_member_wallet`.
    static let icon_member_wallet = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_member_wallet")
    /// Image `icon_more_1_w16`.
    static let icon_more_1_w16 = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_more_1_w16")
    /// Image `icon_privacy_option_optional`.
    static let icon_privacy_option_optional = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_privacy_option_optional")
    /// Image `icon_privacy_option_private`.
    static let icon_privacy_option_private = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_privacy_option_private")
    /// Image `icon_privacy_option_public`.
    static let icon_privacy_option_public = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_privacy_option_public")
    /// Image `icon_privacy_public`.
    static let icon_privacy_public = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_privacy_public")
    /// Image `icon_reply_26`.
    static let icon_reply_26 = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_reply_26")
    /// Image `icon_search_w22`.
    static let icon_search_w22 = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_search_w22")
    /// Image `icon_searchbar_clear_w19`.
    static let icon_searchbar_clear_w19 = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_searchbar_clear_w19")
    /// Image `icon_searchbar_search_w20`.
    static let icon_searchbar_search_w20 = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_searchbar_search_w20")
    /// Image `icon_share_01_26`.
    static let icon_share_01_26 = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_share_01_26")
    /// Image `icon_share_w25_mail`.
    static let icon_share_w25_mail = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_share_w25_mail")
    /// Image `icon_share_w25_phone`.
    static let icon_share_w25_phone = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_share_w25_phone")
    /// Image `icon_social_media_facebook`.
    static let icon_social_media_facebook = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_social_media_facebook")
    /// Image `icon_social_media_google`.
    static let icon_social_media_google = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_social_media_google")
    /// Image `icon_social_media_twitter`.
    static let icon_social_media_twitter = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_social_media_twitter")
    /// Image `icon_success_h30`.
    static let icon_success_h30 = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_success_h30")
    /// Image `icon_tools_tag`.
    static let icon_tools_tag = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_tools_tag")
    /// Image `icon_w18_grey_album`.
    static let icon_w18_grey_album = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_w18_grey_album")
    /// Image `icon_w18_grey_calendar`.
    static let icon_w18_grey_calendar = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_w18_grey_calendar")
    /// Image `icon_w18_grey_paper`.
    static let icon_w18_grey_paper = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_w18_grey_paper")
    /// Image `icon_w18_grey_resource`.
    static let icon_w18_grey_resource = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_w18_grey_resource")
    /// Image `img_avatar_1`.
    static let img_avatar_1 = Rswift.ImageResource(bundle: R.hostingBundle, name: "img_avatar_1")
    /// Image `img_avatar_2`.
    static let img_avatar_2 = Rswift.ImageResource(bundle: R.hostingBundle, name: "img_avatar_2")
    /// Image `img_avatar_3`.
    static let img_avatar_3 = Rswift.ImageResource(bundle: R.hostingBundle, name: "img_avatar_3")
    /// Image `img_avatar_4`.
    static let img_avatar_4 = Rswift.ImageResource(bundle: R.hostingBundle, name: "img_avatar_4")
    /// Image `img_avatar_5`.
    static let img_avatar_5 = Rswift.ImageResource(bundle: R.hostingBundle, name: "img_avatar_5")
    /// Image `img_avatar_6`.
    static let img_avatar_6 = Rswift.ImageResource(bundle: R.hostingBundle, name: "img_avatar_6")
    /// Image `img_banner_05`.
    static let img_banner_05 = Rswift.ImageResource(bundle: R.hostingBundle, name: "img_banner_05")
    /// Image `img_circle_avatar_1-1`.
    static let img_circle_avatar_11 = Rswift.ImageResource(bundle: R.hostingBundle, name: "img_circle_avatar_1-1")
    /// Image `img_circle_avatar_1`.
    static let img_circle_avatar_1 = Rswift.ImageResource(bundle: R.hostingBundle, name: "img_circle_avatar_1")
    /// Image `img_circle_avatar_2`.
    static let img_circle_avatar_2 = Rswift.ImageResource(bundle: R.hostingBundle, name: "img_circle_avatar_2")
    /// Image `img_circle_avatar_3`.
    static let img_circle_avatar_3 = Rswift.ImageResource(bundle: R.hostingBundle, name: "img_circle_avatar_3")
    /// Image `img_circle_avatar_4`.
    static let img_circle_avatar_4 = Rswift.ImageResource(bundle: R.hostingBundle, name: "img_circle_avatar_4")
    /// Image `img_circle_avatar_5`.
    static let img_circle_avatar_5 = Rswift.ImageResource(bundle: R.hostingBundle, name: "img_circle_avatar_5")
    /// Image `img_circle_avatar_6`.
    static let img_circle_avatar_6 = Rswift.ImageResource(bundle: R.hostingBundle, name: "img_circle_avatar_6")
    /// Image `img_circle_avatar_7`.
    static let img_circle_avatar_7 = Rswift.ImageResource(bundle: R.hostingBundle, name: "img_circle_avatar_7")
    /// Image `img_circle_avatar_cats_1`.
    static let img_circle_avatar_cats_1 = Rswift.ImageResource(bundle: R.hostingBundle, name: "img_circle_avatar_cats_1")
    /// Image `img_circle_avatar_cats_2`.
    static let img_circle_avatar_cats_2 = Rswift.ImageResource(bundle: R.hostingBundle, name: "img_circle_avatar_cats_2")
    /// Image `img_circle_avatar_cats_3`.
    static let img_circle_avatar_cats_3 = Rswift.ImageResource(bundle: R.hostingBundle, name: "img_circle_avatar_cats_3")
    /// Image `img_circle_avatar_cats_4`.
    static let img_circle_avatar_cats_4 = Rswift.ImageResource(bundle: R.hostingBundle, name: "img_circle_avatar_cats_4")
    /// Image `img_circle_avatar_cats_5`.
    static let img_circle_avatar_cats_5 = Rswift.ImageResource(bundle: R.hostingBundle, name: "img_circle_avatar_cats_5")
    /// Image `img_hello!`.
    static let img_hello = Rswift.ImageResource(bundle: R.hostingBundle, name: "img_hello!")
    /// Image `img_leading_01`.
    static let img_leading_01 = Rswift.ImageResource(bundle: R.hostingBundle, name: "img_leading_01")
    /// Image `img_leading_02`.
    static let img_leading_02 = Rswift.ImageResource(bundle: R.hostingBundle, name: "img_leading_02")
    /// Image `img_leading_03`.
    static let img_leading_03 = Rswift.ImageResource(bundle: R.hostingBundle, name: "img_leading_03")
    /// Image `img_little_girl`.
    static let img_little_girl = Rswift.ImageResource(bundle: R.hostingBundle, name: "img_little_girl")
    /// Image `img_talk_avatar_cats_1`.
    static let img_talk_avatar_cats_1 = Rswift.ImageResource(bundle: R.hostingBundle, name: "img_talk_avatar_cats_1")
    /// Image `img_talk_avatar_cats_2`.
    static let img_talk_avatar_cats_2 = Rswift.ImageResource(bundle: R.hostingBundle, name: "img_talk_avatar_cats_2")
    /// Image `img_talk_avatar_cats_3`.
    static let img_talk_avatar_cats_3 = Rswift.ImageResource(bundle: R.hostingBundle, name: "img_talk_avatar_cats_3")
    /// Image `img_talk_avatar_cats_4`.
    static let img_talk_avatar_cats_4 = Rswift.ImageResource(bundle: R.hostingBundle, name: "img_talk_avatar_cats_4")
    /// Image `img_user_banner_01`.
    static let img_user_banner_01 = Rswift.ImageResource(bundle: R.hostingBundle, name: "img_user_banner_01")
    /// Image `loading`.
    static let loading = Rswift.ImageResource(bundle: R.hostingBundle, name: "loading")
    /// Image `logo_2`.
    static let logo_2 = Rswift.ImageResource(bundle: R.hostingBundle, name: "logo_2")
    /// Image `logo`.
    static let logo = Rswift.ImageResource(bundle: R.hostingBundle, name: "logo")
    /// Image `radio_button_1_selected`.
    static let radio_button_1_selected = Rswift.ImageResource(bundle: R.hostingBundle, name: "radio_button_1_selected")
    /// Image `radio_button_1`.
    static let radio_button_1 = Rswift.ImageResource(bundle: R.hostingBundle, name: "radio_button_1")
    /// Image `switch_off`.
    static let switch_off = Rswift.ImageResource(bundle: R.hostingBundle, name: "switch_off")
    /// Image `switch_on`.
    static let switch_on = Rswift.ImageResource(bundle: R.hostingBundle, name: "switch_on")
    /// Image `userItemBg`.
    static let userItemBg = Rswift.ImageResource(bundle: R.hostingBundle, name: "userItemBg")

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "Group 5031", bundle: ..., traitCollection: ...)`
    static func group5031(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.group5031, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "bg_2", bundle: ..., traitCollection: ...)`
    static func bg_2(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.bg_2, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "bg_3", bundle: ..., traitCollection: ...)`
    static func bg_3(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.bg_3, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "bg_top_light", bundle: ..., traitCollection: ...)`
    static func bg_top_light(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.bg_top_light, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "btn_icon_pluse", bundle: ..., traitCollection: ...)`
    static func btn_icon_pluse(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.btn_icon_pluse, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "btn_social_media_facebook", bundle: ..., traitCollection: ...)`
    static func btn_social_media_facebook(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.btn_social_media_facebook, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "btn_social_media_github", bundle: ..., traitCollection: ...)`
    static func btn_social_media_github(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.btn_social_media_github, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "btn_social_media_ig", bundle: ..., traitCollection: ...)`
    static func btn_social_media_ig(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.btn_social_media_ig, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "btn_social_media_linkedin", bundle: ..., traitCollection: ...)`
    static func btn_social_media_linkedin(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.btn_social_media_linkedin, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "btn_social_media_twwiter", bundle: ..., traitCollection: ...)`
    static func btn_social_media_twwiter(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.btn_social_media_twwiter, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "btn_social_media_yt", bundle: ..., traitCollection: ...)`
    static func btn_social_media_yt(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.btn_social_media_yt, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "camera_circle_bg", bundle: ..., traitCollection: ...)`
    static func camera_circle_bg(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.camera_circle_bg, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "checkbox", bundle: ..., traitCollection: ...)`
    static func checkbox(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.checkbox, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "checkbox_selected", bundle: ..., traitCollection: ...)`
    static func checkbox_selected(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.checkbox_selected, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "edit_avatar", bundle: ..., traitCollection: ...)`
    static func edit_avatar(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.edit_avatar, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "half_gradient_from_bottom", bundle: ..., traitCollection: ...)`
    static func half_gradient_from_bottom(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.half_gradient_from_bottom, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "icon_Interest_camer", bundle: ..., traitCollection: ...)`
    static func icon_Interest_camer(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_Interest_camer, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "icon_Interest_cooking", bundle: ..., traitCollection: ...)`
    static func icon_Interest_cooking(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_Interest_cooking, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "icon_Interest_music", bundle: ..., traitCollection: ...)`
    static func icon_Interest_music(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_Interest_music, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "icon_Interest_travel", bundle: ..., traitCollection: ...)`
    static func icon_Interest_travel(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_Interest_travel, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "icon_add friend_2", bundle: ..., traitCollection: ...)`
    static func icon_addFriend_2(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_addFriend_2, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "icon_arrow_2_down", bundle: ..., traitCollection: ...)`
    static func icon_arrow_2_down(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_arrow_2_down, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "icon_arrow_2_right", bundle: ..., traitCollection: ...)`
    static func icon_arrow_2_right(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_arrow_2_right, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "icon_arrow_3_right", bundle: ..., traitCollection: ...)`
    static func icon_arrow_3_right(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_arrow_3_right, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "icon_arrow_left_w10_h16", bundle: ..., traitCollection: ...)`
    static func icon_arrow_left_w10_h16(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_arrow_left_w10_h16, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "icon_avatar", bundle: ..., traitCollection: ...)`
    static func icon_avatar(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_avatar, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "icon_awesome_26", bundle: ..., traitCollection: ...)`
    static func icon_awesome_26(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_awesome_26, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "icon_birthday", bundle: ..., traitCollection: ...)`
    static func icon_birthday(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_birthday, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "icon_bookmark_26", bundle: ..., traitCollection: ...)`
    static func icon_bookmark_26(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_bookmark_26, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "icon_bottom_bar_home_02", bundle: ..., traitCollection: ...)`
    static func icon_bottom_bar_home_02(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_bottom_bar_home_02, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "icon_bottom_bar_home_02_b_full", bundle: ..., traitCollection: ...)`
    static func icon_bottom_bar_home_02_b_full(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_bottom_bar_home_02_b_full, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "icon_bottom_bar_member", bundle: ..., traitCollection: ...)`
    static func icon_bottom_bar_member(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_bottom_bar_member, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "icon_bottom_bar_member_b_full", bundle: ..., traitCollection: ...)`
    static func icon_bottom_bar_member_b_full(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_bottom_bar_member_b_full, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "icon_bottom_bar_s_bigcircle_02", bundle: ..., traitCollection: ...)`
    static func icon_bottom_bar_s_bigcircle_02(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_bottom_bar_s_bigcircle_02, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "icon_bottom_bar_s_bigcircle_02_b_full", bundle: ..., traitCollection: ...)`
    static func icon_bottom_bar_s_bigcircle_02_b_full(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_bottom_bar_s_bigcircle_02_b_full, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "icon_bottom_bar_s_circle_02", bundle: ..., traitCollection: ...)`
    static func icon_bottom_bar_s_circle_02(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_bottom_bar_s_circle_02, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "icon_bottom_bar_s_circle_02_b_full", bundle: ..., traitCollection: ...)`
    static func icon_bottom_bar_s_circle_02_b_full(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_bottom_bar_s_circle_02_b_full, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "icon_bottom_bar_s_message_02", bundle: ..., traitCollection: ...)`
    static func icon_bottom_bar_s_message_02(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_bottom_bar_s_message_02, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "icon_bottom_bar_s_message_02_b_full", bundle: ..., traitCollection: ...)`
    static func icon_bottom_bar_s_message_02_b_full(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_bottom_bar_s_message_02_b_full, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "icon_btn_arrow_left_01_h30", bundle: ..., traitCollection: ...)`
    static func icon_btn_arrow_left_01_h30(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_btn_arrow_left_01_h30, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "icon_btn_eye_h30", bundle: ..., traitCollection: ...)`
    static func icon_btn_eye_h30(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_btn_eye_h30, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "icon_btn_pluss", bundle: ..., traitCollection: ...)`
    static func icon_btn_pluss(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_btn_pluss, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "icon_btn_user", bundle: ..., traitCollection: ...)`
    static func icon_btn_user(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_btn_user, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "icon_calendar_1", bundle: ..., traitCollection: ...)`
    static func icon_calendar_1(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_calendar_1, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "icon_calendar_2_s_white", bundle: ..., traitCollection: ...)`
    static func icon_calendar_2_s_white(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_calendar_2_s_white, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "icon_camera", bundle: ..., traitCollection: ...)`
    static func icon_camera(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_camera, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "icon_check_1", bundle: ..., traitCollection: ...)`
    static func icon_check_1(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_check_1, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "icon_check_round", bundle: ..., traitCollection: ...)`
    static func icon_check_round(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_check_round, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "icon_close_1_w14", bundle: ..., traitCollection: ...)`
    static func icon_close_1_w14(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_close_1_w14, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "icon_coin_22", bundle: ..., traitCollection: ...)`
    static func icon_coin_22(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_coin_22, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "icon_colour_tick", bundle: ..., traitCollection: ...)`
    static func icon_colour_tick(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_colour_tick, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "icon_down_01", bundle: ..., traitCollection: ...)`
    static func icon_down_01(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_down_01, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "icon_edit", bundle: ..., traitCollection: ...)`
    static func icon_edit(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_edit, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "icon_error_1", bundle: ..., traitCollection: ...)`
    static func icon_error_1(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_error_1, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "icon_eyes_2", bundle: ..., traitCollection: ...)`
    static func icon_eyes_2(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_eyes_2, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "icon_eyes_3", bundle: ..., traitCollection: ...)`
    static func icon_eyes_3(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_eyes_3, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "icon_friends_line", bundle: ..., traitCollection: ...)`
    static func icon_friends_line(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_friends_line, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "icon_gender_female", bundle: ..., traitCollection: ...)`
    static func icon_gender_female(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_gender_female, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "icon_gender_male", bundle: ..., traitCollection: ...)`
    static func icon_gender_male(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_gender_male, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "icon_gender_third", bundle: ..., traitCollection: ...)`
    static func icon_gender_third(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_gender_third, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "icon_gift_line_26", bundle: ..., traitCollection: ...)`
    static func icon_gift_line_26(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_gift_line_26, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "icon_header_bell", bundle: ..., traitCollection: ...)`
    static func icon_header_bell(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_header_bell, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "icon_landscape", bundle: ..., traitCollection: ...)`
    static func icon_landscape(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_landscape, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "icon_medal_1", bundle: ..., traitCollection: ...)`
    static func icon_medal_1(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_medal_1, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "icon_medal_２", bundle: ..., traitCollection: ...)`
    static func icon_medal_２(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_medal_２, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "icon_member_11_help", bundle: ..., traitCollection: ...)`
    static func icon_member_11_help(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_member_11_help, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "icon_member_12_setting", bundle: ..., traitCollection: ...)`
    static func icon_member_12_setting(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_member_12_setting, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "icon_member_1_bigcircle", bundle: ..., traitCollection: ...)`
    static func icon_member_1_bigcircle(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_member_1_bigcircle, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "icon_member_20_circle", bundle: ..., traitCollection: ...)`
    static func icon_member_20_circle(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_member_20_circle, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "icon_member_3_bookmark", bundle: ..., traitCollection: ...)`
    static func icon_member_3_bookmark(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_member_3_bookmark, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "icon_member_4_circle_volume", bundle: ..., traitCollection: ...)`
    static func icon_member_4_circle_volume(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_member_4_circle_volume, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "icon_member_5_draft", bundle: ..., traitCollection: ...)`
    static func icon_member_5_draft(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_member_5_draft, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "icon_member_6_history", bundle: ..., traitCollection: ...)`
    static func icon_member_6_history(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_member_6_history, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "icon_member_7_tag", bundle: ..., traitCollection: ...)`
    static func icon_member_7_tag(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_member_7_tag, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "icon_member_9_account", bundle: ..., traitCollection: ...)`
    static func icon_member_9_account(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_member_9_account, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "icon_member_wallet", bundle: ..., traitCollection: ...)`
    static func icon_member_wallet(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_member_wallet, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "icon_more_1_w16", bundle: ..., traitCollection: ...)`
    static func icon_more_1_w16(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_more_1_w16, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "icon_privacy_option_optional", bundle: ..., traitCollection: ...)`
    static func icon_privacy_option_optional(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_privacy_option_optional, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "icon_privacy_option_private", bundle: ..., traitCollection: ...)`
    static func icon_privacy_option_private(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_privacy_option_private, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "icon_privacy_option_public", bundle: ..., traitCollection: ...)`
    static func icon_privacy_option_public(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_privacy_option_public, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "icon_privacy_public", bundle: ..., traitCollection: ...)`
    static func icon_privacy_public(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_privacy_public, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "icon_reply_26", bundle: ..., traitCollection: ...)`
    static func icon_reply_26(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_reply_26, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "icon_search_w22", bundle: ..., traitCollection: ...)`
    static func icon_search_w22(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_search_w22, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "icon_searchbar_clear_w19", bundle: ..., traitCollection: ...)`
    static func icon_searchbar_clear_w19(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_searchbar_clear_w19, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "icon_searchbar_search_w20", bundle: ..., traitCollection: ...)`
    static func icon_searchbar_search_w20(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_searchbar_search_w20, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "icon_share_01_26", bundle: ..., traitCollection: ...)`
    static func icon_share_01_26(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_share_01_26, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "icon_share_w25_mail", bundle: ..., traitCollection: ...)`
    static func icon_share_w25_mail(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_share_w25_mail, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "icon_share_w25_phone", bundle: ..., traitCollection: ...)`
    static func icon_share_w25_phone(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_share_w25_phone, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "icon_social_media_facebook", bundle: ..., traitCollection: ...)`
    static func icon_social_media_facebook(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_social_media_facebook, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "icon_social_media_google", bundle: ..., traitCollection: ...)`
    static func icon_social_media_google(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_social_media_google, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "icon_social_media_twitter", bundle: ..., traitCollection: ...)`
    static func icon_social_media_twitter(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_social_media_twitter, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "icon_success_h30", bundle: ..., traitCollection: ...)`
    static func icon_success_h30(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_success_h30, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "icon_tools_tag", bundle: ..., traitCollection: ...)`
    static func icon_tools_tag(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_tools_tag, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "icon_w18_grey_album", bundle: ..., traitCollection: ...)`
    static func icon_w18_grey_album(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_w18_grey_album, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "icon_w18_grey_calendar", bundle: ..., traitCollection: ...)`
    static func icon_w18_grey_calendar(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_w18_grey_calendar, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "icon_w18_grey_paper", bundle: ..., traitCollection: ...)`
    static func icon_w18_grey_paper(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_w18_grey_paper, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "icon_w18_grey_resource", bundle: ..., traitCollection: ...)`
    static func icon_w18_grey_resource(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_w18_grey_resource, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "img_avatar_1", bundle: ..., traitCollection: ...)`
    static func img_avatar_1(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.img_avatar_1, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "img_avatar_2", bundle: ..., traitCollection: ...)`
    static func img_avatar_2(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.img_avatar_2, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "img_avatar_3", bundle: ..., traitCollection: ...)`
    static func img_avatar_3(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.img_avatar_3, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "img_avatar_4", bundle: ..., traitCollection: ...)`
    static func img_avatar_4(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.img_avatar_4, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "img_avatar_5", bundle: ..., traitCollection: ...)`
    static func img_avatar_5(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.img_avatar_5, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "img_avatar_6", bundle: ..., traitCollection: ...)`
    static func img_avatar_6(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.img_avatar_6, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "img_banner_05", bundle: ..., traitCollection: ...)`
    static func img_banner_05(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.img_banner_05, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "img_circle_avatar_1", bundle: ..., traitCollection: ...)`
    static func img_circle_avatar_1(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.img_circle_avatar_1, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "img_circle_avatar_1-1", bundle: ..., traitCollection: ...)`
    static func img_circle_avatar_11(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.img_circle_avatar_11, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "img_circle_avatar_2", bundle: ..., traitCollection: ...)`
    static func img_circle_avatar_2(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.img_circle_avatar_2, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "img_circle_avatar_3", bundle: ..., traitCollection: ...)`
    static func img_circle_avatar_3(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.img_circle_avatar_3, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "img_circle_avatar_4", bundle: ..., traitCollection: ...)`
    static func img_circle_avatar_4(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.img_circle_avatar_4, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "img_circle_avatar_5", bundle: ..., traitCollection: ...)`
    static func img_circle_avatar_5(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.img_circle_avatar_5, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "img_circle_avatar_6", bundle: ..., traitCollection: ...)`
    static func img_circle_avatar_6(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.img_circle_avatar_6, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "img_circle_avatar_7", bundle: ..., traitCollection: ...)`
    static func img_circle_avatar_7(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.img_circle_avatar_7, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "img_circle_avatar_cats_1", bundle: ..., traitCollection: ...)`
    static func img_circle_avatar_cats_1(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.img_circle_avatar_cats_1, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "img_circle_avatar_cats_2", bundle: ..., traitCollection: ...)`
    static func img_circle_avatar_cats_2(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.img_circle_avatar_cats_2, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "img_circle_avatar_cats_3", bundle: ..., traitCollection: ...)`
    static func img_circle_avatar_cats_3(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.img_circle_avatar_cats_3, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "img_circle_avatar_cats_4", bundle: ..., traitCollection: ...)`
    static func img_circle_avatar_cats_4(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.img_circle_avatar_cats_4, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "img_circle_avatar_cats_5", bundle: ..., traitCollection: ...)`
    static func img_circle_avatar_cats_5(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.img_circle_avatar_cats_5, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "img_hello!", bundle: ..., traitCollection: ...)`
    static func img_hello(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.img_hello, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "img_leading_01", bundle: ..., traitCollection: ...)`
    static func img_leading_01(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.img_leading_01, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "img_leading_02", bundle: ..., traitCollection: ...)`
    static func img_leading_02(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.img_leading_02, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "img_leading_03", bundle: ..., traitCollection: ...)`
    static func img_leading_03(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.img_leading_03, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "img_little_girl", bundle: ..., traitCollection: ...)`
    static func img_little_girl(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.img_little_girl, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "img_talk_avatar_cats_1", bundle: ..., traitCollection: ...)`
    static func img_talk_avatar_cats_1(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.img_talk_avatar_cats_1, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "img_talk_avatar_cats_2", bundle: ..., traitCollection: ...)`
    static func img_talk_avatar_cats_2(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.img_talk_avatar_cats_2, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "img_talk_avatar_cats_3", bundle: ..., traitCollection: ...)`
    static func img_talk_avatar_cats_3(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.img_talk_avatar_cats_3, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "img_talk_avatar_cats_4", bundle: ..., traitCollection: ...)`
    static func img_talk_avatar_cats_4(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.img_talk_avatar_cats_4, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "img_user_banner_01", bundle: ..., traitCollection: ...)`
    static func img_user_banner_01(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.img_user_banner_01, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "loading", bundle: ..., traitCollection: ...)`
    static func loading(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.loading, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "logo", bundle: ..., traitCollection: ...)`
    static func logo(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.logo, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "logo_2", bundle: ..., traitCollection: ...)`
    static func logo_2(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.logo_2, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "radio_button_1", bundle: ..., traitCollection: ...)`
    static func radio_button_1(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.radio_button_1, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "radio_button_1_selected", bundle: ..., traitCollection: ...)`
    static func radio_button_1_selected(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.radio_button_1_selected, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "switch_off", bundle: ..., traitCollection: ...)`
    static func switch_off(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.switch_off, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "switch_on", bundle: ..., traitCollection: ...)`
    static func switch_on(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.switch_on, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "userItemBg", bundle: ..., traitCollection: ...)`
    static func userItemBg(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.userItemBg, compatibleWith: traitCollection)
    }
    #endif

    fileprivate init() {}
  }

  /// This `R.string` struct is generated, and contains static references to 1 localization tables.
  struct string {
    /// This `R.string.localizable` struct is generated, and contains static references to 195 localization keys.
    struct localizable {
      /// en translation: 
      ///
      /// Locales: en, zh-Hant
      static let profile_edit_name_placeHolder = Rswift.StringResource(key: "profile_edit_name_placeHolder", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hant"], comment: nil)
      /// en translation: <b>%@</b>人
      ///
      /// Locales: en, zh-Hant
      static let circle_content_top_member_count = Rswift.StringResource(key: "circle_content_top_member_count", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hant"], comment: nil)
      /// en translation: <b>1.</b> 填寫圈圈正名資料
      ///
      /// Locales: en, zh-Hant
      static let circle_create_vc_circle_verify_step_1 = Rswift.StringResource(key: "circle_create_vc_circle_verify_step_1", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hant"], comment: nil)
      /// en translation: <b>2.</b> 上傳個人身分證明
      ///
      /// Locales: en, zh-Hant
      static let circle_create_vc_circle_verify_step_2 = Rswift.StringResource(key: "circle_create_vc_circle_verify_step_2", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hant"], comment: nil)
      /// en translation: <b>3.</b> 綁定銀行帳戶
      ///
      /// Locales: en, zh-Hant
      static let circle_create_vc_circle_verify_step_3 = Rswift.StringResource(key: "circle_create_vc_circle_verify_step_3", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hant"], comment: nil)
      /// en translation: Hi, 歡迎回來 ~
      ///
      /// Locales: en, zh-Hant
      static let login_vc_subtitle = Rswift.StringResource(key: "login_vc_subtitle", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hant"], comment: nil)
      /// en translation: YYYY /  MM /  DD /
      ///
      /// Locales: en, zh-Hant
      static let verify_vc_birth_placeholder = Rswift.StringResource(key: "verify_vc_birth_placeholder", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hant"], comment: nil)
      /// en translation: 下一步
      ///
      /// Locales: en, zh-Hant
      static let circle_create_vc_circle_profile_next = Rswift.StringResource(key: "circle_create_vc_circle_profile_next", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hant"], comment: nil)
      /// en translation: 下一步
      ///
      /// Locales: en, zh-Hant
      static let topic_options_next = Rswift.StringResource(key: "topic_options_next", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hant"], comment: nil)
      /// en translation: 不是有效的電子郵件
      ///
      /// Locales: en, zh-Hant
      static let login_vc_login_password_error = Rswift.StringResource(key: "login_vc_login_password_error", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hant"], comment: nil)
      /// en translation: 主修
      ///
      /// Locales: en, zh-Hant
      static let profile_website_edit_education_major = Rswift.StringResource(key: "profile_website_edit_education_major", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hant"], comment: nil)
      /// en translation: 也可以經營 自己的粉絲圈
      ///
      /// Locales: en, zh-Hant
      static let leading_tutorial_feature_text_1 = Rswift.StringResource(key: "leading_tutorial_feature_text_1", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hant"], comment: nil)
      /// en translation: 了解獲利模式
      ///
      /// Locales: en, zh-Hant
      static let circle_create_vc_circle_verify_known_button = Rswift.StringResource(key: "circle_create_vc_circle_verify_known_button", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hant"], comment: nil)
      /// en translation: 互動記錄
      ///
      /// Locales: en, zh-Hant
      static let member_list_item_history = Rswift.StringResource(key: "member_list_item_history", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hant"], comment: nil)
      /// en translation: 介紹你的圈圈，讓圈友了解圈圈內容。
      ///
      /// Locales: en, zh-Hant
      static let circle_create_vc_circle_profile_placeholder = Rswift.StringResource(key: "circle_create_vc_circle_profile_placeholder", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hant"], comment: nil)
      /// en translation: 以 Facebook 登入
      ///
      /// Locales: en, zh-Hant
      static let login_vc_login_by_facebook = Rswift.StringResource(key: "login_vc_login_by_facebook", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hant"], comment: nil)
      /// en translation: 以 Facebook 繼續
      ///
      /// Locales: en, zh-Hant
      static let register_vc_login_by_facebook = Rswift.StringResource(key: "register_vc_login_by_facebook", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hant"], comment: nil)
      /// en translation: 以 Google 登入
      ///
      /// Locales: en, zh-Hant
      static let login_vc_login_by_google = Rswift.StringResource(key: "login_vc_login_by_google", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hant"], comment: nil)
      /// en translation: 以 Google 繼續
      ///
      /// Locales: en, zh-Hant
      static let register_vc_login_by_google = Rswift.StringResource(key: "register_vc_login_by_google", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hant"], comment: nil)
      /// en translation: 以 twitter 登入
      ///
      /// Locales: en, zh-Hant
      static let login_vc_login_by_twitter = Rswift.StringResource(key: "login_vc_login_by_twitter", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hant"], comment: nil)
      /// en translation: 以 twitter 繼續
      ///
      /// Locales: en, zh-Hant
      static let register_vc_login_by_twitter = Rswift.StringResource(key: "register_vc_login_by_twitter", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hant"], comment: nil)
      /// en translation: 任何人都能搜尋，觀看內容
      ///
      /// Locales: en, zh-Hant
      static let circle_create_vc_circle_privacy_public_description = Rswift.StringResource(key: "circle_create_vc_circle_privacy_public_description", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hant"], comment: nil)
      /// en translation: 你對什麼感興趣呢？
      ///
      /// Locales: en, zh-Hant
      static let topic_options_title = Rswift.StringResource(key: "topic_options_title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hant"], comment: nil)
      /// en translation: 來介紹自己吧
      ///
      /// Locales: en, zh-Hant
      static let profile_edit_intro_placeHolder = Rswift.StringResource(key: "profile_edit_intro_placeHolder", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hant"], comment: nil)
      /// en translation: 例：我的個人網站
      ///
      /// Locales: en, zh-Hant
      static let profile_website_edit_web_placeholder = Rswift.StringResource(key: "profile_website_edit_web_placeholder", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hant"], comment: nil)
      /// en translation: 修改
      ///
      /// Locales: en, zh-Hant
      static let circle_create_vc_circle_profile_modify = Rswift.StringResource(key: "circle_create_vc_circle_profile_modify", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hant"], comment: nil)
      /// en translation: 修改個人橫幅
      ///
      /// Locales: en, zh-Hant
      static let profile_edit_banner = Rswift.StringResource(key: "profile_edit_banner", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hant"], comment: nil)
      /// en translation: 修改密碼
      ///
      /// Locales: en, zh-Hant
      static let resetPwd_vc_re_submit_button = Rswift.StringResource(key: "resetPwd_vc_re_submit_button", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hant"], comment: nil)
      /// en translation: 個人簡介
      ///
      /// Locales: en, zh-Hant
      static let profile_edit_intro_title = Rswift.StringResource(key: "profile_edit_intro_title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hant"], comment: nil)
      /// en translation: 個人簡介
      ///
      /// Locales: en, zh-Hant
      static let profile_intro = Rswift.StringResource(key: "profile_intro", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hant"], comment: nil)
      /// en translation: 個人網站
      ///
      /// Locales: en, zh-Hant
      static let profile_list_item_website = Rswift.StringResource(key: "profile_list_item_website", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hant"], comment: nil)
      /// en translation: 個人網站
      ///
      /// Locales: en, zh-Hant
      static let profile_website_edit_title = Rswift.StringResource(key: "profile_website_edit_title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hant"], comment: nil)
      /// en translation: 傳送認證碼
      ///
      /// Locales: en, zh-Hant
      static let verify_vc_phone_send_verify_code = Rswift.StringResource(key: "verify_vc_phone_send_verify_code", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hant"], comment: nil)
      /// en translation: 傳送驗證信
      ///
      /// Locales: en, zh-Hant
      static let register_vc_submit_button = Rswift.StringResource(key: "register_vc_submit_button", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hant"], comment: nil)
      /// en translation: 儲存
      ///
      /// Locales: en, zh-Hant
      static let circle_create_vc_circle_profile_save = Rswift.StringResource(key: "circle_create_vc_circle_profile_save", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hant"], comment: nil)
      /// en translation: 儲存
      ///
      /// Locales: en, zh-Hant
      static let profile_edit_save = Rswift.StringResource(key: "profile_edit_save", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hant"], comment: nil)
      /// en translation: 公告
      ///
      /// Locales: en, zh-Hant
      static let circle_content_category_bulletin = Rswift.StringResource(key: "circle_content_category_bulletin", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hant"], comment: nil)
      /// en translation: 公開
      ///
      /// Locales: en, zh-Hant
      static let circle_create_vc_circle_privacy_public = Rswift.StringResource(key: "circle_create_vc_circle_privacy_public", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hant"], comment: nil)
      /// en translation: 公開
      ///
      /// Locales: en, zh-Hant
      static let profile_edit_public = Rswift.StringResource(key: "profile_edit_public", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hant"], comment: nil)
      /// en translation: 再次確認密碼
      ///
      /// Locales: en, zh-Hant
      static let register_vc_register_re_password_placeholder = Rswift.StringResource(key: "register_vc_register_re_password_placeholder", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hant"], comment: nil)
      /// en translation: 再次確認密碼
      ///
      /// Locales: en, zh-Hant
      static let resetPwd_vc_re_password_placeholder = Rswift.StringResource(key: "resetPwd_vc_re_password_placeholder", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hant"], comment: nil)
      /// en translation: 出生日期作為忘記密碼的驗證欄位，最多可修改2次。
      ///
      /// Locales: en, zh-Hant
      static let profile_edit_birth_hint = Rswift.StringResource(key: "profile_edit_birth_hint", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hant"], comment: nil)
      /// en translation: 剩餘%@天
      ///
      /// Locales: en, zh-Hant
      static let circle_content_top_remain_days = Rswift.StringResource(key: "circle_content_top_remain_days", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hant"], comment: nil)
      /// en translation: 剪裁照片
      ///
      /// Locales: en, zh-Hant
      static let circle_create_vc_circle_profile_clip = Rswift.StringResource(key: "circle_create_vc_circle_profile_clip", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hant"], comment: nil)
      /// en translation: 加入
      ///
      /// Locales: en, zh-Hant
      static let circle_content_top_join = Rswift.StringResource(key: "circle_content_top_join", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hant"], comment: nil)
      /// en translation: 取個暱稱作為公開的稱呼
      ///
      /// Locales: en, zh-Hant
      static let profile_edit_nickname_placeHolder = Rswift.StringResource(key: "profile_edit_nickname_placeHolder", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hant"], comment: nil)
      /// en translation: 問卷、投票、活動報 名、測驗互動功能 免 費使用
      ///
      /// Locales: en, zh-Hant
      static let leading_tutorial_feature_text_4 = Rswift.StringResource(key: "leading_tutorial_feature_text_4", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hant"], comment: nil)
      /// en translation: 圈圈
      ///
      /// Locales: en, zh-Hant
      static let circle_vc_title = Rswift.StringResource(key: "circle_vc_title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hant"], comment: nil)
      /// en translation: 圈圈
      ///
      /// Locales: en, zh-Hant
      static let member_info_circle_title = Rswift.StringResource(key: "member_info_circle_title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hant"], comment: nil)
      /// en translation: 圈圈
      ///
      /// Locales: en, zh-Hant
      static let tool_bar_circle = Rswift.StringResource(key: "tool_bar_circle", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hant"], comment: nil)
      /// en translation: 圈圈名稱
      ///
      /// Locales: en, zh-Hant
      static let circle_create_vc_circle_name = Rswift.StringResource(key: "circle_create_vc_circle_name", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hant"], comment: nil)
      /// en translation: 圈圈頭像
      ///
      /// Locales: en, zh-Hant
      static let circle_create_vc_circle_profile_avatar = Rswift.StringResource(key: "circle_create_vc_circle_profile_avatar", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hant"], comment: nil)
      /// en translation: 圈幣
      ///
      /// Locales: en, zh-Hant
      static let member_info_coin_title = Rswift.StringResource(key: "member_info_coin_title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hant"], comment: nil)
      /// en translation: 基本資料
      ///
      /// Locales: en, zh-Hant
      static let profile_edit_basic_info = Rswift.StringResource(key: "profile_edit_basic_info", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hant"], comment: nil)
      /// en translation: 填寫學歷除了讓其他圈友更加了解你，更容易讓同學校 / 學科 / 領域的人搜尋到你。
      ///
      /// Locales: en, zh-Hant
      static let profile_website_edit_education_hint = Rswift.StringResource(key: "profile_website_edit_education_hint", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hant"], comment: nil)
      /// en translation: 多樣的編輯工具， 讓你進行創作。
      ///
      /// Locales: en, zh-Hant
      static let leading_tutorial_feature_text_3 = Rswift.StringResource(key: "leading_tutorial_feature_text_3", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hant"], comment: nil)
      /// en translation: 女性
      ///
      /// Locales: en, zh-Hant
      static let verify_vc_gender_female = Rswift.StringResource(key: "verify_vc_gender_female", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hant"], comment: nil)
      /// en translation: 姓名
      ///
      /// Locales: en, zh-Hant
      static let profile_edit_name_title = Rswift.StringResource(key: "profile_edit_name_title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hant"], comment: nil)
      /// en translation: 姓名
      ///
      /// Locales: en, zh-Hant
      static let verify_vc_name = Rswift.StringResource(key: "verify_vc_name", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hant"], comment: nil)
      /// en translation: 學校名稱
      ///
      /// Locales: en, zh-Hant
      static let profile_website_edit_education_school_name = Rswift.StringResource(key: "profile_website_edit_education_school_name", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hant"], comment: nil)
      /// en translation: 學歷基本資料
      ///
      /// Locales: en, zh-Hant
      static let profile_website_edit_education_info_title = Rswift.StringResource(key: "profile_website_edit_education_info_title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hant"], comment: nil)
      /// en translation: 學歷說明
      ///
      /// Locales: en, zh-Hant
      static let profile_website_edit_education_intro_title = Rswift.StringResource(key: "profile_website_edit_education_intro_title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hant"], comment: nil)
      /// en translation: 寄出認證信
      ///
      /// Locales: en, zh-Hant
      static let forgetPwd_vc_submit = Rswift.StringResource(key: "forgetPwd_vc_submit", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hant"], comment: nil)
      /// en translation: 密碼
      ///
      /// Locales: en, zh-Hant
      static let login_vc_login_password_title = Rswift.StringResource(key: "login_vc_login_password_title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hant"], comment: nil)
      /// en translation: 專業技能
      ///
      /// Locales: en, zh-Hant
      static let profile_list_item_skills = Rswift.StringResource(key: "profile_list_item_skills", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hant"], comment: nil)
      /// en translation: 就學中
      ///
      /// Locales: en, zh-Hant
      static let profile_website_edit_education_studying = Rswift.StringResource(key: "profile_website_edit_education_studying", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hant"], comment: nil)
      /// en translation: 就學狀態
      ///
      /// Locales: en, zh-Hant
      static let profile_website_edit_education_status = Rswift.StringResource(key: "profile_website_edit_education_status", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hant"], comment: nil)
      /// en translation: 就讀時間
      ///
      /// Locales: en, zh-Hant
      static let profile_website_edit_education_date = Rswift.StringResource(key: "profile_website_edit_education_date", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hant"], comment: nil)
      /// en translation: 工作經驗
      ///
      /// Locales: en, zh-Hant
      static let profile_list_item_workHistory = Rswift.StringResource(key: "profile_list_item_workHistory", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hant"], comment: nil)
      /// en translation: 已加入
      ///
      /// Locales: en, zh-Hant
      static let circle_vc_joined = Rswift.StringResource(key: "circle_vc_joined", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hant"], comment: nil)
      /// en translation: 已加入圈圈 <b>%@</b>
      ///
      /// Locales: en, zh-Hant
      static let circle_vc_joined_count_label = Rswift.StringResource(key: "circle_vc_joined_count_label", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hant"], comment: nil)
      /// en translation: 已有帳號 ? 登入
      ///
      /// Locales: en, zh-Hant
      static let register_vc_login_label = Rswift.StringResource(key: "register_vc_login_label", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hant"], comment: nil)
      /// en translation: 已訂閱
      ///
      /// Locales: en, zh-Hant
      static let circle_content_top_did_subscribe = Rswift.StringResource(key: "circle_content_top_did_subscribe", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hant"], comment: nil)
      /// en translation: 已選 <b>(%@)</b>
      ///
      /// Locales: en, zh-Hant
      static let topic_options_selected_count = Rswift.StringResource(key: "topic_options_selected_count", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hant"], comment: nil)
      /// en translation: 帳號管理
      ///
      /// Locales: en, zh-Hant
      static let member_list_item_account = Rswift.StringResource(key: "member_list_item_account", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hant"], comment: nil)
      /// en translation: 建立
      ///
      /// Locales: en, zh-Hant
      static let circle_create_vc_add_button = Rswift.StringResource(key: "circle_create_vc_add_button", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hant"], comment: nil)
      /// en translation: 建立
      ///
      /// Locales: en, zh-Hant
      static let circle_vc_add_button = Rswift.StringResource(key: "circle_vc_add_button", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hant"], comment: nil)
      /// en translation: 建立圈圈
      ///
      /// Locales: en, zh-Hant
      static let circle_create_vc_title = Rswift.StringResource(key: "circle_create_vc_title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hant"], comment: nil)
      /// en translation: 忘記密碼
      ///
      /// Locales: en, zh-Hant
      static let forgetPwd_vc_title = Rswift.StringResource(key: "forgetPwd_vc_title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hant"], comment: nil)
      /// en translation: 忘記密碼?
      ///
      /// Locales: en, zh-Hant
      static let login_vc_login_password_forgot = Rswift.StringResource(key: "login_vc_login_password_forgot", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hant"], comment: nil)
      /// en translation: 性別
      ///
      /// Locales: en, zh-Hant
      static let verify_vc_gender = Rswift.StringResource(key: "verify_vc_gender", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hant"], comment: nil)
      /// en translation: 您可以填寫特別傑出的成續或經歷，為自己加分!
      ///
      /// Locales: en, zh-Hant
      static let profile_website_edit_education_intro_placeholder = Rswift.StringResource(key: "profile_website_edit_education_intro_placeholder", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hant"], comment: nil)
      /// en translation: 您的密碼必須包含英文、數字 <b>8-20</b> 個字元
      ///
      /// Locales: en, zh-Hant
      static let register_vc_password_hint = Rswift.StringResource(key: "register_vc_password_hint", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hant"], comment: nil)
      /// en translation: 成員
      ///
      /// Locales: en, zh-Hant
      static let circle_content_top_member_title = Rswift.StringResource(key: "circle_content_top_member_title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hant"], comment: nil)
      /// en translation: 我建立的
      ///
      /// Locales: en, zh-Hant
      static let circle_vc_created = Rswift.StringResource(key: "circle_vc_created", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hant"], comment: nil)
      /// en translation: 我建立的圈圈
      ///
      /// Locales: en, zh-Hant
      static let profile_list_item_circle = Rswift.StringResource(key: "profile_list_item_circle", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hant"], comment: nil)
      /// en translation: 我的收藏
      ///
      /// Locales: en, zh-Hant
      static let member_list_item_bookmark = Rswift.StringResource(key: "member_list_item_bookmark", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hant"], comment: nil)
      /// en translation: 我的暱稱
      ///
      /// Locales: en, zh-Hant
      static let profile_nickname = Rswift.StringResource(key: "profile_nickname", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hant"], comment: nil)
      /// en translation: 我的社群
      ///
      /// Locales: en, zh-Hant
      static let profile_list_item_socialMedia = Rswift.StringResource(key: "profile_list_item_socialMedia", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hant"], comment: nil)
      /// en translation: 我的社群
      ///
      /// Locales: en, zh-Hant
      static let profile_website_edit_social_media_title = Rswift.StringResource(key: "profile_website_edit_social_media_title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hant"], comment: nil)
      /// en translation: 我的聲量
      ///
      /// Locales: en, zh-Hant
      static let member_list_item_volume = Rswift.StringResource(key: "member_list_item_volume", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hant"], comment: nil)
      /// en translation: 我的興趣話題
      ///
      /// Locales: en, zh-Hant
      static let member_list_item_bigcircle = Rswift.StringResource(key: "member_list_item_bigcircle", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hant"], comment: nil)
      /// en translation: 我的錢包
      ///
      /// Locales: en, zh-Hant
      static let member_list_item_wallet = Rswift.StringResource(key: "member_list_item_wallet", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hant"], comment: nil)
      /// en translation: 我追蹤的Tag
      ///
      /// Locales: en, zh-Hant
      static let profile_list_item_tag = Rswift.StringResource(key: "profile_list_item_tag", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hant"], comment: nil)
      /// en translation: 或
      ///
      /// Locales: en, zh-Hant
      static let login_vc_login_mid_label = Rswift.StringResource(key: "login_vc_login_mid_label", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hant"], comment: nil)
      /// en translation: 手機安全認證
      ///
      /// Locales: en, zh-Hant
      static let verify_vc_phone_title = Rswift.StringResource(key: "verify_vc_phone_title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hant"], comment: nil)
      /// en translation: 手機號碼
      ///
      /// Locales: en, zh-Hant
      static let forgetPwd_vc_phone_title = Rswift.StringResource(key: "forgetPwd_vc_phone_title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hant"], comment: nil)
      /// en translation: 打賞記錄
      ///
      /// Locales: en, zh-Hant
      static let member_list_item_gift = Rswift.StringResource(key: "member_list_item_gift", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hant"], comment: nil)
      /// en translation: 排序
      ///
      /// Locales: en, zh-Hant
      static let circle_vc_sort_button = Rswift.StringResource(key: "circle_vc_sort_button", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hant"], comment: nil)
      /// en translation: 探索
      ///
      /// Locales: en, zh-Hant
      static let tool_bar_home = Rswift.StringResource(key: "tool_bar_home", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hant"], comment: nil)
      /// en translation: 提出申請
      ///
      /// Locales: en, zh-Hant
      static let circle_create_vc_circle_verify_apply = Rswift.StringResource(key: "circle_create_vc_circle_verify_apply", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hant"], comment: nil)
      /// en translation: 搜尋不到，加入才能看內容
      ///
      /// Locales: en, zh-Hant
      static let circle_create_vc_circle_privacy_private_description = Rswift.StringResource(key: "circle_create_vc_circle_privacy_private_description", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hant"], comment: nil)
      /// en translation: 搜尋得到，加入才能看內容
      ///
      /// Locales: en, zh-Hant
      static let circle_create_vc_circle_privacy_optional_description = Rswift.StringResource(key: "circle_create_vc_circle_privacy_optional_description", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hant"], comment: nil)
      /// en translation: 支持你創作 優質內容的動力
      ///
      /// Locales: en, zh-Hant
      static let leading_tutorial_feature_text_2 = Rswift.StringResource(key: "leading_tutorial_feature_text_2", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hant"], comment: nil)
      /// en translation: 支援與幫助
      ///
      /// Locales: en, zh-Hant
      static let member_list_item_help = Rswift.StringResource(key: "member_list_item_help", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hant"], comment: nil)
      /// en translation: 教育程度
      ///
      /// Locales: en, zh-Hant
      static let profile_website_edit_education_level = Rswift.StringResource(key: "profile_website_edit_education_level", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hant"], comment: nil)
      /// en translation: 教育背景
      ///
      /// Locales: en, zh-Hant
      static let profile_list_item_education = Rswift.StringResource(key: "profile_list_item_education", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hant"], comment: nil)
      /// en translation: 教育背景
      ///
      /// Locales: en, zh-Hant
      static let profile_website_edit_education_title = Rswift.StringResource(key: "profile_website_edit_education_title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hant"], comment: nil)
      /// en translation: 新增
      ///
      /// Locales: en, zh-Hant
      static let profile_website_edit_social_media_add = Rswift.StringResource(key: "profile_website_edit_social_media_add", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hant"], comment: nil)
      /// en translation: 是否要為圈圈正名？
      ///
      /// Locales: en, zh-Hant
      static let circle_create_vc_circle_verify_title = Rswift.StringResource(key: "circle_create_vc_circle_verify_title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hant"], comment: nil)
      /// en translation: 暫時不要
      ///
      /// Locales: en, zh-Hant
      static let circle_create_vc_circle_verify_cancel = Rswift.StringResource(key: "circle_create_vc_circle_verify_cancel", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hant"], comment: nil)
      /// en translation: 暱稱
      ///
      /// Locales: en, zh-Hant
      static let profile_edit_nickname_title = Rswift.StringResource(key: "profile_edit_nickname_title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hant"], comment: nil)
      /// en translation: 會員
      ///
      /// Locales: en, zh-Hant
      static let tool_bar_member = Rswift.StringResource(key: "tool_bar_member", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hant"], comment: nil)
      /// en translation: 朋友
      ///
      /// Locales: en, zh-Hant
      static let member_info_friend_title = Rswift.StringResource(key: "member_info_friend_title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hant"], comment: nil)
      /// en translation: 標題
      ///
      /// Locales: en, zh-Hant
      static let profile_website_edit_web_title = Rswift.StringResource(key: "profile_website_edit_web_title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hant"], comment: nil)
      /// en translation: 檔案
      ///
      /// Locales: en, zh-Hant
      static let circle_content_top_files = Rswift.StringResource(key: "circle_content_top_files", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hant"], comment: nil)
      /// en translation: 歡迎加入我們
      ///
      /// Locales: en, zh-Hant
      static let register_vc_subtitle = Rswift.StringResource(key: "register_vc_subtitle", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hant"], comment: nil)
      /// en translation: 正名只需 <b>3</b> 步驟
      ///
      /// Locales: en, zh-Hant
      static let circle_create_vc_circle_verify_step_title = Rswift.StringResource(key: "circle_create_vc_circle_verify_step_title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hant"], comment: nil)
      /// en translation: 正名通過後，您將可以選擇 <b>贊助制、訂閱制</b> 來支持你的創作
      ///
      /// Locales: en, zh-Hant
      static let circle_create_vc_circle_verify_description = Rswift.StringResource(key: "circle_create_vc_circle_verify_description", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hant"], comment: nil)
      /// en translation: 此圈圈的內容，為成未滿18歲不得瀏覽之內容。
      ///
      /// Locales: en, zh-Hant
      static let circle_create_vc_circle_18y_limit = Rswift.StringResource(key: "circle_create_vc_circle_18y_limit", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hant"], comment: nil)
      /// en translation: 沒收到驗證碼? 重新傳送
      ///
      /// Locales: en, zh-Hant
      static let verify_vc_resend_with_button = Rswift.StringResource(key: "verify_vc_resend_with_button", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hant"], comment: nil)
      /// en translation: 準備開始
      ///
      /// Locales: en, zh-Hant
      static let leading_ready_to_begin = Rswift.StringResource(key: "leading_ready_to_begin", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hant"], comment: nil)
      /// en translation: 為你的圈圈取名子
      ///
      /// Locales: en, zh-Hant
      static let circle_create_vc_circle_name_placeholder = Rswift.StringResource(key: "circle_create_vc_circle_name_placeholder", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hant"], comment: nil)
      /// en translation: 無論對什麼有興趣，Meta Circle都有！ 點選以下話題來追蹤最新討論。
      ///
      /// Locales: en, zh-Hant
      static let topic_options_subtitle = Rswift.StringResource(key: "topic_options_subtitle", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hant"], comment: nil)
      /// en translation: 生日
      ///
      /// Locales: en, zh-Hant
      static let verify_vc_birth = Rswift.StringResource(key: "verify_vc_birth", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hant"], comment: nil)
      /// en translation: 男性
      ///
      /// Locales: en, zh-Hant
      static let verify_vc_gender_male = Rswift.StringResource(key: "verify_vc_gender_male", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hant"], comment: nil)
      /// en translation: 畢業
      ///
      /// Locales: en, zh-Hant
      static let profile_website_edit_education_graduate = Rswift.StringResource(key: "profile_website_edit_education_graduate", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hant"], comment: nil)
      /// en translation: 略過
      ///
      /// Locales: en, zh-Hant
      static let circle_create_vc_circle_profile_skip = Rswift.StringResource(key: "circle_create_vc_circle_profile_skip", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hant"], comment: nil)
      /// en translation: 略過
      ///
      /// Locales: en, zh-Hant
      static let leading_skip = Rswift.StringResource(key: "leading_skip", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hant"], comment: nil)
      /// en translation: 登入
      ///
      /// Locales: en, zh-Hant
      static let login_vc_login_button = Rswift.StringResource(key: "login_vc_login_button", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hant"], comment: nil)
      /// en translation: 登入
      ///
      /// Locales: en, zh-Hant
      static let login_vc_title = Rswift.StringResource(key: "login_vc_title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hant"], comment: nil)
      /// en translation: 登入
      ///
      /// Locales: en, zh-Hant
      static let register_vc_login_button = Rswift.StringResource(key: "register_vc_login_button", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hant"], comment: nil)
      /// en translation: 登入
      ///
      /// Locales: en, zh-Hant
      static let tool_bar_login = Rswift.StringResource(key: "tool_bar_login", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hant"], comment: nil)
      /// en translation: 登出
      ///
      /// Locales: en, zh-Hant
      static let member_list_item_logout = Rswift.StringResource(key: "member_list_item_logout", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hant"], comment: nil)
      /// en translation: 相簿
      ///
      /// Locales: en, zh-Hant
      static let circle_content_top_album = Rswift.StringResource(key: "circle_content_top_album", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hant"], comment: nil)
      /// en translation: 確定
      ///
      /// Locales: en, zh-Hant
      static let confirm = Rswift.StringResource(key: "confirm", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hant"], comment: nil)
      /// en translation: 私密
      ///
      /// Locales: en, zh-Hant
      static let circle_create_vc_circle_privacy_private = Rswift.StringResource(key: "circle_create_vc_circle_privacy_private", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hant"], comment: nil)
      /// en translation: 私訊
      ///
      /// Locales: en, zh-Hant
      static let tool_bar_message = Rswift.StringResource(key: "tool_bar_message", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hant"], comment: nil)
      /// en translation: 科系名稱
      ///
      /// Locales: en, zh-Hant
      static let profile_website_edit_education_department_name = Rswift.StringResource(key: "profile_website_edit_education_department_name", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hant"], comment: nil)
      /// en translation: 立即註冊
      ///
      /// Locales: en, zh-Hant
      static let login_vc_register_button = Rswift.StringResource(key: "login_vc_register_button", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hant"], comment: nil)
      /// en translation: 第三性
      ///
      /// Locales: en, zh-Hant
      static let verify_vc_gender_intersex = Rswift.StringResource(key: "verify_vc_gender_intersex", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hant"], comment: nil)
      /// en translation: 簡介
      ///
      /// Locales: en, zh-Hant
      static let circle_content_top_info = Rswift.StringResource(key: "circle_content_top_info", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hant"], comment: nil)
      /// en translation: 簡介
      ///
      /// Locales: en, zh-Hant
      static let circle_create_vc_circle_profile_title = Rswift.StringResource(key: "circle_create_vc_circle_profile_title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hant"], comment: nil)
      /// en translation: 簡介橫幅
      ///
      /// Locales: en, zh-Hant
      static let circle_create_vc_circle_profile_banner = Rswift.StringResource(key: "circle_create_vc_circle_profile_banner", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hant"], comment: nil)
      /// en translation: 結束
      ///
      /// Locales: en, zh-Hant
      static let profile_website_edit_education_end = Rswift.StringResource(key: "profile_website_edit_education_end", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hant"], comment: nil)
      /// en translation: 網址
      ///
      /// Locales: en, zh-Hant
      static let profile_website_edit_web_url_title = Rswift.StringResource(key: "profile_website_edit_web_url_title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hant"], comment: nil)
      /// en translation: 網路內容分級
      ///
      /// Locales: en, zh-Hant
      static let circle_create_vc_circle_level = Rswift.StringResource(key: "circle_create_vc_circle_level", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hant"], comment: nil)
      /// en translation: 編輯基本資料
      ///
      /// Locales: en, zh-Hant
      static let profile_edit_title = Rswift.StringResource(key: "profile_edit_title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hant"], comment: nil)
      /// en translation: 編輯檔案
      ///
      /// Locales: en, zh-Hant
      static let member_profile_edit_file = Rswift.StringResource(key: "member_profile_edit_file", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hant"], comment: nil)
      /// en translation: 置頂
      ///
      /// Locales: en, zh-Hant
      static let circle_content_category_pin = Rswift.StringResource(key: "circle_content_category_pin", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hant"], comment: nil)
      /// en translation: 職涯空檔
      ///
      /// Locales: en, zh-Hant
      static let profile_list_item_careerBreak = Rswift.StringResource(key: "profile_list_item_careerBreak", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hant"], comment: nil)
      /// en translation: 肄業
      ///
      /// Locales: en, zh-Hant
      static let profile_website_edit_education_quit = Rswift.StringResource(key: "profile_website_edit_education_quit", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hant"], comment: nil)
      /// en translation: 至少3項
      ///
      /// Locales: en, zh-Hant
      static let topic_options_count_label = Rswift.StringResource(key: "topic_options_count_label", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hant"], comment: nil)
      /// en translation: 行程
      ///
      /// Locales: en, zh-Hant
      static let circle_content_top_calendar = Rswift.StringResource(key: "circle_content_top_calendar", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hant"], comment: nil)
      /// en translation: 訂閱
      ///
      /// Locales: en, zh-Hant
      static let circle_content_top_subscribe = Rswift.StringResource(key: "circle_content_top_subscribe", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hant"], comment: nil)
      /// en translation: 討論區
      ///
      /// Locales: en, zh-Hant
      static let circle_content_category_forum = Rswift.StringResource(key: "circle_content_category_forum", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hant"], comment: nil)
      /// en translation: 設定
      ///
      /// Locales: en, zh-Hant
      static let member_list_item_setting = Rswift.StringResource(key: "member_list_item_setting", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hant"], comment: nil)
      /// en translation: 設定密碼
      ///
      /// Locales: en, zh-Hant
      static let register_vc_register_password_title = Rswift.StringResource(key: "register_vc_register_password_title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hant"], comment: nil)
      /// en translation: 設定密碼
      ///
      /// Locales: en, zh-Hant
      static let resetPwd_vc_pwd_title = Rswift.StringResource(key: "resetPwd_vc_pwd_title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hant"], comment: nil)
      /// en translation: 註冊
      ///
      /// Locales: en, zh-Hant
      static let register_vc_title = Rswift.StringResource(key: "register_vc_title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hant"], comment: nil)
      /// en translation: 話題
      ///
      /// Locales: en, zh-Hant
      static let tool_bar_big_circle = Rswift.StringResource(key: "tool_bar_big_circle", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hant"], comment: nil)
      /// en translation: 請填寫個人資料
      ///
      /// Locales: en, zh-Hant
      static let verify_vc_succeed_subtitle = Rswift.StringResource(key: "verify_vc_succeed_subtitle", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hant"], comment: nil)
      /// en translation: 請輸入手機號碼與生日，讓我們確認身份與傳送驗證信，方便您重新設定密碼。
      ///
      /// Locales: en, zh-Hant
      static let forgetPwd_vc_subtitle = Rswift.StringResource(key: "forgetPwd_vc_subtitle", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hant"], comment: nil)
      /// en translation: 請輸入電話號碼，我們將做為增加帳號的 安全性，及取回密碼時使用。
      ///
      /// Locales: en, zh-Hant
      static let verify_vc_phone_subtitle = Rswift.StringResource(key: "verify_vc_phone_subtitle", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hant"], comment: nil)
      /// en translation: 請選擇
      ///
      /// Locales: en, zh-Hant
      static let circle_create_vc_circle_category_placeholder = Rswift.StringResource(key: "circle_create_vc_circle_category_placeholder", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hant"], comment: nil)
      /// en translation: 請選擇
      ///
      /// Locales: en, zh-Hant
      static let profile_website_edit_education_please_select = Rswift.StringResource(key: "profile_website_edit_education_please_select", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hant"], comment: nil)
      /// en translation: 請選擇
      ///
      /// Locales: en, zh-Hant
      static let verify_vc_gender_placeholder = Rswift.StringResource(key: "verify_vc_gender_placeholder", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hant"], comment: nil)
      /// en translation: 貼文草稿
      ///
      /// Locales: en, zh-Hant
      static let member_list_item_draft = Rswift.StringResource(key: "member_list_item_draft", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hant"], comment: nil)
      /// en translation: 贊助
      ///
      /// Locales: en, zh-Hant
      static let circle_content_top_sponsor = Rswift.StringResource(key: "circle_content_top_sponsor", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hant"], comment: nil)
      /// en translation: 輸入密碼
      ///
      /// Locales: en, zh-Hant
      static let login_vc_login_password_placeholder = Rswift.StringResource(key: "login_vc_login_password_placeholder", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hant"], comment: nil)
      /// en translation: 輸入密碼
      ///
      /// Locales: en, zh-Hant
      static let resetPwd_vc_password_placeholder = Rswift.StringResource(key: "resetPwd_vc_password_placeholder", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hant"], comment: nil)
      /// en translation: 輸入手機號碼
      ///
      /// Locales: en, zh-Hant
      static let verify_vc_phone_placeholder = Rswift.StringResource(key: "verify_vc_phone_placeholder", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hant"], comment: nil)
      /// en translation: 輸入網址URL
      ///
      /// Locales: en, zh-Hant
      static let profile_website_edit_web_url_placeholder = Rswift.StringResource(key: "profile_website_edit_web_url_placeholder", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hant"], comment: nil)
      /// en translation: 輸入電子郵件
      ///
      /// Locales: en, zh-Hant
      static let login_vc_login_mail_placeholder = Rswift.StringResource(key: "login_vc_login_mail_placeholder", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hant"], comment: nil)
      /// en translation: 追蹤Tag管理
      ///
      /// Locales: en, zh-Hant
      static let member_list_item_tag = Rswift.StringResource(key: "member_list_item_tag", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hant"], comment: nil)
      /// en translation: 選擇生日
      ///
      /// Locales: en, zh-Hant
      static let verify_vc_birth_selection = Rswift.StringResource(key: "verify_vc_birth_selection", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hant"], comment: nil)
      /// en translation: 邀請
      ///
      /// Locales: en, zh-Hant
      static let circle_content_top_invite = Rswift.StringResource(key: "circle_content_top_invite", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hant"], comment: nil)
      /// en translation: 還不是會員 ? 立即註冊
      ///
      /// Locales: en, zh-Hant
      static let login_vc_register_label = Rswift.StringResource(key: "login_vc_register_label", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hant"], comment: nil)
      /// en translation: 部份公開
      ///
      /// Locales: en, zh-Hant
      static let circle_create_vc_circle_privacy_optional = Rswift.StringResource(key: "circle_create_vc_circle_privacy_optional", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hant"], comment: nil)
      /// en translation: 重新傳送
      ///
      /// Locales: en, zh-Hant
      static let verify_vc_resend_button = Rswift.StringResource(key: "verify_vc_resend_button", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hant"], comment: nil)
      /// en translation: 重新傳送驗證碼 <b>%@</b>
      ///
      /// Locales: en, zh-Hant
      static let verify_vc_resend = Rswift.StringResource(key: "verify_vc_resend", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hant"], comment: nil)
      /// en translation: 重新設定密碼
      ///
      /// Locales: en, zh-Hant
      static let resetPwd_vc_title = Rswift.StringResource(key: "resetPwd_vc_title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hant"], comment: nil)
      /// en translation: 重設
      ///
      /// Locales: en, zh-Hant
      static let profile_edit_reset = Rswift.StringResource(key: "profile_edit_reset", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hant"], comment: nil)
      /// en translation: 長度需為 8-20 個字元
      ///
      /// Locales: en, zh-Hant
      static let register_vc_password_hint2 = Rswift.StringResource(key: "register_vc_password_hint2", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hant"], comment: nil)
      /// en translation: 開始
      ///
      /// Locales: en, zh-Hant
      static let profile_website_edit_education_start = Rswift.StringResource(key: "profile_website_edit_education_start", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hant"], comment: nil)
      /// en translation: 開始體驗
      ///
      /// Locales: en, zh-Hant
      static let leading_tutorial_begin = Rswift.StringResource(key: "leading_tutorial_begin", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hant"], comment: nil)
      /// en translation: 閱讀更多
      ///
      /// Locales: en, zh-Hant
      static let circle_content_read_more = Rswift.StringResource(key: "circle_content_read_more", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hant"], comment: nil)
      /// en translation: 隱私設定
      ///
      /// Locales: en, zh-Hant
      static let circle_create_vc_circle_privacy = Rswift.StringResource(key: "circle_create_vc_circle_privacy", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hant"], comment: nil)
      /// en translation: 電子郵件
      ///
      /// Locales: en, zh-Hant
      static let login_vc_login_mail_title = Rswift.StringResource(key: "login_vc_login_mail_title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hant"], comment: nil)
      /// en translation: 需包含英文與數字
      ///
      /// Locales: en, zh-Hant
      static let register_vc_password_hint3 = Rswift.StringResource(key: "register_vc_password_hint3", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hant"], comment: nil)
      /// en translation: 類別
      ///
      /// Locales: en, zh-Hant
      static let circle_create_vc_circle_category = Rswift.StringResource(key: "circle_create_vc_circle_category", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hant"], comment: nil)
      /// en translation: 驗證完成!
      ///
      /// Locales: en, zh-Hant
      static let verify_vc_succeed_title = Rswift.StringResource(key: "verify_vc_succeed_title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hant"], comment: nil)
      /// en translation: 驗證成功
      ///
      /// Locales: en, zh-Hant
      static let resetPwd_vc_verify_succeed_hint = Rswift.StringResource(key: "resetPwd_vc_verify_succeed_hint", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hant"], comment: nil)
      /// en translation: 驗證碼已傳送至
      ///
      /// Locales: en, zh-Hant
      static let verify_vc_subtitle = Rswift.StringResource(key: "verify_vc_subtitle", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hant"], comment: nil)
      /// en translation: 驗證電子郵件信箱
      ///
      /// Locales: en, zh-Hant
      static let verify_vc_mail_title = Rswift.StringResource(key: "verify_vc_mail_title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hant"], comment: nil)

      /// en translation: 
      ///
      /// Locales: en, zh-Hant
      static func profile_edit_name_placeHolder(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("profile_edit_name_placeHolder", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "profile_edit_name_placeHolder"
        }

        return NSLocalizedString("profile_edit_name_placeHolder", bundle: bundle, comment: "")
      }

      /// en translation: <b>%@</b>人
      ///
      /// Locales: en, zh-Hant
      static func circle_content_top_member_count(_ value1: String, preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          let format = NSLocalizedString("circle_content_top_member_count", bundle: hostingBundle, comment: "")
          return String(format: format, locale: applicationLocale, value1)
        }

        guard let (locale, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "circle_content_top_member_count"
        }

        let format = NSLocalizedString("circle_content_top_member_count", bundle: bundle, comment: "")
        return String(format: format, locale: locale, value1)
      }

      /// en translation: <b>1.</b> 填寫圈圈正名資料
      ///
      /// Locales: en, zh-Hant
      static func circle_create_vc_circle_verify_step_1(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("circle_create_vc_circle_verify_step_1", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "circle_create_vc_circle_verify_step_1"
        }

        return NSLocalizedString("circle_create_vc_circle_verify_step_1", bundle: bundle, comment: "")
      }

      /// en translation: <b>2.</b> 上傳個人身分證明
      ///
      /// Locales: en, zh-Hant
      static func circle_create_vc_circle_verify_step_2(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("circle_create_vc_circle_verify_step_2", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "circle_create_vc_circle_verify_step_2"
        }

        return NSLocalizedString("circle_create_vc_circle_verify_step_2", bundle: bundle, comment: "")
      }

      /// en translation: <b>3.</b> 綁定銀行帳戶
      ///
      /// Locales: en, zh-Hant
      static func circle_create_vc_circle_verify_step_3(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("circle_create_vc_circle_verify_step_3", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "circle_create_vc_circle_verify_step_3"
        }

        return NSLocalizedString("circle_create_vc_circle_verify_step_3", bundle: bundle, comment: "")
      }

      /// en translation: Hi, 歡迎回來 ~
      ///
      /// Locales: en, zh-Hant
      static func login_vc_subtitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("login_vc_subtitle", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "login_vc_subtitle"
        }

        return NSLocalizedString("login_vc_subtitle", bundle: bundle, comment: "")
      }

      /// en translation: YYYY /  MM /  DD /
      ///
      /// Locales: en, zh-Hant
      static func verify_vc_birth_placeholder(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("verify_vc_birth_placeholder", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "verify_vc_birth_placeholder"
        }

        return NSLocalizedString("verify_vc_birth_placeholder", bundle: bundle, comment: "")
      }

      /// en translation: 下一步
      ///
      /// Locales: en, zh-Hant
      static func circle_create_vc_circle_profile_next(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("circle_create_vc_circle_profile_next", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "circle_create_vc_circle_profile_next"
        }

        return NSLocalizedString("circle_create_vc_circle_profile_next", bundle: bundle, comment: "")
      }

      /// en translation: 下一步
      ///
      /// Locales: en, zh-Hant
      static func topic_options_next(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("topic_options_next", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "topic_options_next"
        }

        return NSLocalizedString("topic_options_next", bundle: bundle, comment: "")
      }

      /// en translation: 不是有效的電子郵件
      ///
      /// Locales: en, zh-Hant
      static func login_vc_login_password_error(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("login_vc_login_password_error", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "login_vc_login_password_error"
        }

        return NSLocalizedString("login_vc_login_password_error", bundle: bundle, comment: "")
      }

      /// en translation: 主修
      ///
      /// Locales: en, zh-Hant
      static func profile_website_edit_education_major(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("profile_website_edit_education_major", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "profile_website_edit_education_major"
        }

        return NSLocalizedString("profile_website_edit_education_major", bundle: bundle, comment: "")
      }

      /// en translation: 也可以經營 自己的粉絲圈
      ///
      /// Locales: en, zh-Hant
      static func leading_tutorial_feature_text_1(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("leading_tutorial_feature_text_1", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "leading_tutorial_feature_text_1"
        }

        return NSLocalizedString("leading_tutorial_feature_text_1", bundle: bundle, comment: "")
      }

      /// en translation: 了解獲利模式
      ///
      /// Locales: en, zh-Hant
      static func circle_create_vc_circle_verify_known_button(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("circle_create_vc_circle_verify_known_button", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "circle_create_vc_circle_verify_known_button"
        }

        return NSLocalizedString("circle_create_vc_circle_verify_known_button", bundle: bundle, comment: "")
      }

      /// en translation: 互動記錄
      ///
      /// Locales: en, zh-Hant
      static func member_list_item_history(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("member_list_item_history", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "member_list_item_history"
        }

        return NSLocalizedString("member_list_item_history", bundle: bundle, comment: "")
      }

      /// en translation: 介紹你的圈圈，讓圈友了解圈圈內容。
      ///
      /// Locales: en, zh-Hant
      static func circle_create_vc_circle_profile_placeholder(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("circle_create_vc_circle_profile_placeholder", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "circle_create_vc_circle_profile_placeholder"
        }

        return NSLocalizedString("circle_create_vc_circle_profile_placeholder", bundle: bundle, comment: "")
      }

      /// en translation: 以 Facebook 登入
      ///
      /// Locales: en, zh-Hant
      static func login_vc_login_by_facebook(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("login_vc_login_by_facebook", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "login_vc_login_by_facebook"
        }

        return NSLocalizedString("login_vc_login_by_facebook", bundle: bundle, comment: "")
      }

      /// en translation: 以 Facebook 繼續
      ///
      /// Locales: en, zh-Hant
      static func register_vc_login_by_facebook(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("register_vc_login_by_facebook", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "register_vc_login_by_facebook"
        }

        return NSLocalizedString("register_vc_login_by_facebook", bundle: bundle, comment: "")
      }

      /// en translation: 以 Google 登入
      ///
      /// Locales: en, zh-Hant
      static func login_vc_login_by_google(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("login_vc_login_by_google", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "login_vc_login_by_google"
        }

        return NSLocalizedString("login_vc_login_by_google", bundle: bundle, comment: "")
      }

      /// en translation: 以 Google 繼續
      ///
      /// Locales: en, zh-Hant
      static func register_vc_login_by_google(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("register_vc_login_by_google", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "register_vc_login_by_google"
        }

        return NSLocalizedString("register_vc_login_by_google", bundle: bundle, comment: "")
      }

      /// en translation: 以 twitter 登入
      ///
      /// Locales: en, zh-Hant
      static func login_vc_login_by_twitter(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("login_vc_login_by_twitter", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "login_vc_login_by_twitter"
        }

        return NSLocalizedString("login_vc_login_by_twitter", bundle: bundle, comment: "")
      }

      /// en translation: 以 twitter 繼續
      ///
      /// Locales: en, zh-Hant
      static func register_vc_login_by_twitter(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("register_vc_login_by_twitter", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "register_vc_login_by_twitter"
        }

        return NSLocalizedString("register_vc_login_by_twitter", bundle: bundle, comment: "")
      }

      /// en translation: 任何人都能搜尋，觀看內容
      ///
      /// Locales: en, zh-Hant
      static func circle_create_vc_circle_privacy_public_description(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("circle_create_vc_circle_privacy_public_description", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "circle_create_vc_circle_privacy_public_description"
        }

        return NSLocalizedString("circle_create_vc_circle_privacy_public_description", bundle: bundle, comment: "")
      }

      /// en translation: 你對什麼感興趣呢？
      ///
      /// Locales: en, zh-Hant
      static func topic_options_title(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("topic_options_title", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "topic_options_title"
        }

        return NSLocalizedString("topic_options_title", bundle: bundle, comment: "")
      }

      /// en translation: 來介紹自己吧
      ///
      /// Locales: en, zh-Hant
      static func profile_edit_intro_placeHolder(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("profile_edit_intro_placeHolder", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "profile_edit_intro_placeHolder"
        }

        return NSLocalizedString("profile_edit_intro_placeHolder", bundle: bundle, comment: "")
      }

      /// en translation: 例：我的個人網站
      ///
      /// Locales: en, zh-Hant
      static func profile_website_edit_web_placeholder(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("profile_website_edit_web_placeholder", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "profile_website_edit_web_placeholder"
        }

        return NSLocalizedString("profile_website_edit_web_placeholder", bundle: bundle, comment: "")
      }

      /// en translation: 修改
      ///
      /// Locales: en, zh-Hant
      static func circle_create_vc_circle_profile_modify(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("circle_create_vc_circle_profile_modify", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "circle_create_vc_circle_profile_modify"
        }

        return NSLocalizedString("circle_create_vc_circle_profile_modify", bundle: bundle, comment: "")
      }

      /// en translation: 修改個人橫幅
      ///
      /// Locales: en, zh-Hant
      static func profile_edit_banner(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("profile_edit_banner", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "profile_edit_banner"
        }

        return NSLocalizedString("profile_edit_banner", bundle: bundle, comment: "")
      }

      /// en translation: 修改密碼
      ///
      /// Locales: en, zh-Hant
      static func resetPwd_vc_re_submit_button(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("resetPwd_vc_re_submit_button", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "resetPwd_vc_re_submit_button"
        }

        return NSLocalizedString("resetPwd_vc_re_submit_button", bundle: bundle, comment: "")
      }

      /// en translation: 個人簡介
      ///
      /// Locales: en, zh-Hant
      static func profile_edit_intro_title(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("profile_edit_intro_title", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "profile_edit_intro_title"
        }

        return NSLocalizedString("profile_edit_intro_title", bundle: bundle, comment: "")
      }

      /// en translation: 個人簡介
      ///
      /// Locales: en, zh-Hant
      static func profile_intro(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("profile_intro", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "profile_intro"
        }

        return NSLocalizedString("profile_intro", bundle: bundle, comment: "")
      }

      /// en translation: 個人網站
      ///
      /// Locales: en, zh-Hant
      static func profile_list_item_website(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("profile_list_item_website", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "profile_list_item_website"
        }

        return NSLocalizedString("profile_list_item_website", bundle: bundle, comment: "")
      }

      /// en translation: 個人網站
      ///
      /// Locales: en, zh-Hant
      static func profile_website_edit_title(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("profile_website_edit_title", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "profile_website_edit_title"
        }

        return NSLocalizedString("profile_website_edit_title", bundle: bundle, comment: "")
      }

      /// en translation: 傳送認證碼
      ///
      /// Locales: en, zh-Hant
      static func verify_vc_phone_send_verify_code(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("verify_vc_phone_send_verify_code", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "verify_vc_phone_send_verify_code"
        }

        return NSLocalizedString("verify_vc_phone_send_verify_code", bundle: bundle, comment: "")
      }

      /// en translation: 傳送驗證信
      ///
      /// Locales: en, zh-Hant
      static func register_vc_submit_button(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("register_vc_submit_button", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "register_vc_submit_button"
        }

        return NSLocalizedString("register_vc_submit_button", bundle: bundle, comment: "")
      }

      /// en translation: 儲存
      ///
      /// Locales: en, zh-Hant
      static func circle_create_vc_circle_profile_save(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("circle_create_vc_circle_profile_save", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "circle_create_vc_circle_profile_save"
        }

        return NSLocalizedString("circle_create_vc_circle_profile_save", bundle: bundle, comment: "")
      }

      /// en translation: 儲存
      ///
      /// Locales: en, zh-Hant
      static func profile_edit_save(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("profile_edit_save", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "profile_edit_save"
        }

        return NSLocalizedString("profile_edit_save", bundle: bundle, comment: "")
      }

      /// en translation: 公告
      ///
      /// Locales: en, zh-Hant
      static func circle_content_category_bulletin(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("circle_content_category_bulletin", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "circle_content_category_bulletin"
        }

        return NSLocalizedString("circle_content_category_bulletin", bundle: bundle, comment: "")
      }

      /// en translation: 公開
      ///
      /// Locales: en, zh-Hant
      static func circle_create_vc_circle_privacy_public(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("circle_create_vc_circle_privacy_public", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "circle_create_vc_circle_privacy_public"
        }

        return NSLocalizedString("circle_create_vc_circle_privacy_public", bundle: bundle, comment: "")
      }

      /// en translation: 公開
      ///
      /// Locales: en, zh-Hant
      static func profile_edit_public(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("profile_edit_public", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "profile_edit_public"
        }

        return NSLocalizedString("profile_edit_public", bundle: bundle, comment: "")
      }

      /// en translation: 再次確認密碼
      ///
      /// Locales: en, zh-Hant
      static func register_vc_register_re_password_placeholder(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("register_vc_register_re_password_placeholder", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "register_vc_register_re_password_placeholder"
        }

        return NSLocalizedString("register_vc_register_re_password_placeholder", bundle: bundle, comment: "")
      }

      /// en translation: 再次確認密碼
      ///
      /// Locales: en, zh-Hant
      static func resetPwd_vc_re_password_placeholder(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("resetPwd_vc_re_password_placeholder", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "resetPwd_vc_re_password_placeholder"
        }

        return NSLocalizedString("resetPwd_vc_re_password_placeholder", bundle: bundle, comment: "")
      }

      /// en translation: 出生日期作為忘記密碼的驗證欄位，最多可修改2次。
      ///
      /// Locales: en, zh-Hant
      static func profile_edit_birth_hint(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("profile_edit_birth_hint", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "profile_edit_birth_hint"
        }

        return NSLocalizedString("profile_edit_birth_hint", bundle: bundle, comment: "")
      }

      /// en translation: 剩餘%@天
      ///
      /// Locales: en, zh-Hant
      static func circle_content_top_remain_days(_ value1: String, preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          let format = NSLocalizedString("circle_content_top_remain_days", bundle: hostingBundle, comment: "")
          return String(format: format, locale: applicationLocale, value1)
        }

        guard let (locale, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "circle_content_top_remain_days"
        }

        let format = NSLocalizedString("circle_content_top_remain_days", bundle: bundle, comment: "")
        return String(format: format, locale: locale, value1)
      }

      /// en translation: 剪裁照片
      ///
      /// Locales: en, zh-Hant
      static func circle_create_vc_circle_profile_clip(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("circle_create_vc_circle_profile_clip", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "circle_create_vc_circle_profile_clip"
        }

        return NSLocalizedString("circle_create_vc_circle_profile_clip", bundle: bundle, comment: "")
      }

      /// en translation: 加入
      ///
      /// Locales: en, zh-Hant
      static func circle_content_top_join(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("circle_content_top_join", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "circle_content_top_join"
        }

        return NSLocalizedString("circle_content_top_join", bundle: bundle, comment: "")
      }

      /// en translation: 取個暱稱作為公開的稱呼
      ///
      /// Locales: en, zh-Hant
      static func profile_edit_nickname_placeHolder(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("profile_edit_nickname_placeHolder", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "profile_edit_nickname_placeHolder"
        }

        return NSLocalizedString("profile_edit_nickname_placeHolder", bundle: bundle, comment: "")
      }

      /// en translation: 問卷、投票、活動報 名、測驗互動功能 免 費使用
      ///
      /// Locales: en, zh-Hant
      static func leading_tutorial_feature_text_4(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("leading_tutorial_feature_text_4", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "leading_tutorial_feature_text_4"
        }

        return NSLocalizedString("leading_tutorial_feature_text_4", bundle: bundle, comment: "")
      }

      /// en translation: 圈圈
      ///
      /// Locales: en, zh-Hant
      static func circle_vc_title(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("circle_vc_title", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "circle_vc_title"
        }

        return NSLocalizedString("circle_vc_title", bundle: bundle, comment: "")
      }

      /// en translation: 圈圈
      ///
      /// Locales: en, zh-Hant
      static func member_info_circle_title(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("member_info_circle_title", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "member_info_circle_title"
        }

        return NSLocalizedString("member_info_circle_title", bundle: bundle, comment: "")
      }

      /// en translation: 圈圈
      ///
      /// Locales: en, zh-Hant
      static func tool_bar_circle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("tool_bar_circle", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "tool_bar_circle"
        }

        return NSLocalizedString("tool_bar_circle", bundle: bundle, comment: "")
      }

      /// en translation: 圈圈名稱
      ///
      /// Locales: en, zh-Hant
      static func circle_create_vc_circle_name(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("circle_create_vc_circle_name", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "circle_create_vc_circle_name"
        }

        return NSLocalizedString("circle_create_vc_circle_name", bundle: bundle, comment: "")
      }

      /// en translation: 圈圈頭像
      ///
      /// Locales: en, zh-Hant
      static func circle_create_vc_circle_profile_avatar(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("circle_create_vc_circle_profile_avatar", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "circle_create_vc_circle_profile_avatar"
        }

        return NSLocalizedString("circle_create_vc_circle_profile_avatar", bundle: bundle, comment: "")
      }

      /// en translation: 圈幣
      ///
      /// Locales: en, zh-Hant
      static func member_info_coin_title(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("member_info_coin_title", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "member_info_coin_title"
        }

        return NSLocalizedString("member_info_coin_title", bundle: bundle, comment: "")
      }

      /// en translation: 基本資料
      ///
      /// Locales: en, zh-Hant
      static func profile_edit_basic_info(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("profile_edit_basic_info", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "profile_edit_basic_info"
        }

        return NSLocalizedString("profile_edit_basic_info", bundle: bundle, comment: "")
      }

      /// en translation: 填寫學歷除了讓其他圈友更加了解你，更容易讓同學校 / 學科 / 領域的人搜尋到你。
      ///
      /// Locales: en, zh-Hant
      static func profile_website_edit_education_hint(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("profile_website_edit_education_hint", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "profile_website_edit_education_hint"
        }

        return NSLocalizedString("profile_website_edit_education_hint", bundle: bundle, comment: "")
      }

      /// en translation: 多樣的編輯工具， 讓你進行創作。
      ///
      /// Locales: en, zh-Hant
      static func leading_tutorial_feature_text_3(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("leading_tutorial_feature_text_3", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "leading_tutorial_feature_text_3"
        }

        return NSLocalizedString("leading_tutorial_feature_text_3", bundle: bundle, comment: "")
      }

      /// en translation: 女性
      ///
      /// Locales: en, zh-Hant
      static func verify_vc_gender_female(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("verify_vc_gender_female", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "verify_vc_gender_female"
        }

        return NSLocalizedString("verify_vc_gender_female", bundle: bundle, comment: "")
      }

      /// en translation: 姓名
      ///
      /// Locales: en, zh-Hant
      static func profile_edit_name_title(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("profile_edit_name_title", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "profile_edit_name_title"
        }

        return NSLocalizedString("profile_edit_name_title", bundle: bundle, comment: "")
      }

      /// en translation: 姓名
      ///
      /// Locales: en, zh-Hant
      static func verify_vc_name(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("verify_vc_name", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "verify_vc_name"
        }

        return NSLocalizedString("verify_vc_name", bundle: bundle, comment: "")
      }

      /// en translation: 學校名稱
      ///
      /// Locales: en, zh-Hant
      static func profile_website_edit_education_school_name(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("profile_website_edit_education_school_name", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "profile_website_edit_education_school_name"
        }

        return NSLocalizedString("profile_website_edit_education_school_name", bundle: bundle, comment: "")
      }

      /// en translation: 學歷基本資料
      ///
      /// Locales: en, zh-Hant
      static func profile_website_edit_education_info_title(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("profile_website_edit_education_info_title", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "profile_website_edit_education_info_title"
        }

        return NSLocalizedString("profile_website_edit_education_info_title", bundle: bundle, comment: "")
      }

      /// en translation: 學歷說明
      ///
      /// Locales: en, zh-Hant
      static func profile_website_edit_education_intro_title(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("profile_website_edit_education_intro_title", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "profile_website_edit_education_intro_title"
        }

        return NSLocalizedString("profile_website_edit_education_intro_title", bundle: bundle, comment: "")
      }

      /// en translation: 寄出認證信
      ///
      /// Locales: en, zh-Hant
      static func forgetPwd_vc_submit(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("forgetPwd_vc_submit", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "forgetPwd_vc_submit"
        }

        return NSLocalizedString("forgetPwd_vc_submit", bundle: bundle, comment: "")
      }

      /// en translation: 密碼
      ///
      /// Locales: en, zh-Hant
      static func login_vc_login_password_title(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("login_vc_login_password_title", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "login_vc_login_password_title"
        }

        return NSLocalizedString("login_vc_login_password_title", bundle: bundle, comment: "")
      }

      /// en translation: 專業技能
      ///
      /// Locales: en, zh-Hant
      static func profile_list_item_skills(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("profile_list_item_skills", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "profile_list_item_skills"
        }

        return NSLocalizedString("profile_list_item_skills", bundle: bundle, comment: "")
      }

      /// en translation: 就學中
      ///
      /// Locales: en, zh-Hant
      static func profile_website_edit_education_studying(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("profile_website_edit_education_studying", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "profile_website_edit_education_studying"
        }

        return NSLocalizedString("profile_website_edit_education_studying", bundle: bundle, comment: "")
      }

      /// en translation: 就學狀態
      ///
      /// Locales: en, zh-Hant
      static func profile_website_edit_education_status(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("profile_website_edit_education_status", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "profile_website_edit_education_status"
        }

        return NSLocalizedString("profile_website_edit_education_status", bundle: bundle, comment: "")
      }

      /// en translation: 就讀時間
      ///
      /// Locales: en, zh-Hant
      static func profile_website_edit_education_date(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("profile_website_edit_education_date", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "profile_website_edit_education_date"
        }

        return NSLocalizedString("profile_website_edit_education_date", bundle: bundle, comment: "")
      }

      /// en translation: 工作經驗
      ///
      /// Locales: en, zh-Hant
      static func profile_list_item_workHistory(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("profile_list_item_workHistory", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "profile_list_item_workHistory"
        }

        return NSLocalizedString("profile_list_item_workHistory", bundle: bundle, comment: "")
      }

      /// en translation: 已加入
      ///
      /// Locales: en, zh-Hant
      static func circle_vc_joined(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("circle_vc_joined", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "circle_vc_joined"
        }

        return NSLocalizedString("circle_vc_joined", bundle: bundle, comment: "")
      }

      /// en translation: 已加入圈圈 <b>%@</b>
      ///
      /// Locales: en, zh-Hant
      static func circle_vc_joined_count_label(_ value1: String, preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          let format = NSLocalizedString("circle_vc_joined_count_label", bundle: hostingBundle, comment: "")
          return String(format: format, locale: applicationLocale, value1)
        }

        guard let (locale, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "circle_vc_joined_count_label"
        }

        let format = NSLocalizedString("circle_vc_joined_count_label", bundle: bundle, comment: "")
        return String(format: format, locale: locale, value1)
      }

      /// en translation: 已有帳號 ? 登入
      ///
      /// Locales: en, zh-Hant
      static func register_vc_login_label(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("register_vc_login_label", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "register_vc_login_label"
        }

        return NSLocalizedString("register_vc_login_label", bundle: bundle, comment: "")
      }

      /// en translation: 已訂閱
      ///
      /// Locales: en, zh-Hant
      static func circle_content_top_did_subscribe(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("circle_content_top_did_subscribe", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "circle_content_top_did_subscribe"
        }

        return NSLocalizedString("circle_content_top_did_subscribe", bundle: bundle, comment: "")
      }

      /// en translation: 已選 <b>(%@)</b>
      ///
      /// Locales: en, zh-Hant
      static func topic_options_selected_count(_ value1: String, preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          let format = NSLocalizedString("topic_options_selected_count", bundle: hostingBundle, comment: "")
          return String(format: format, locale: applicationLocale, value1)
        }

        guard let (locale, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "topic_options_selected_count"
        }

        let format = NSLocalizedString("topic_options_selected_count", bundle: bundle, comment: "")
        return String(format: format, locale: locale, value1)
      }

      /// en translation: 帳號管理
      ///
      /// Locales: en, zh-Hant
      static func member_list_item_account(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("member_list_item_account", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "member_list_item_account"
        }

        return NSLocalizedString("member_list_item_account", bundle: bundle, comment: "")
      }

      /// en translation: 建立
      ///
      /// Locales: en, zh-Hant
      static func circle_create_vc_add_button(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("circle_create_vc_add_button", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "circle_create_vc_add_button"
        }

        return NSLocalizedString("circle_create_vc_add_button", bundle: bundle, comment: "")
      }

      /// en translation: 建立
      ///
      /// Locales: en, zh-Hant
      static func circle_vc_add_button(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("circle_vc_add_button", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "circle_vc_add_button"
        }

        return NSLocalizedString("circle_vc_add_button", bundle: bundle, comment: "")
      }

      /// en translation: 建立圈圈
      ///
      /// Locales: en, zh-Hant
      static func circle_create_vc_title(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("circle_create_vc_title", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "circle_create_vc_title"
        }

        return NSLocalizedString("circle_create_vc_title", bundle: bundle, comment: "")
      }

      /// en translation: 忘記密碼
      ///
      /// Locales: en, zh-Hant
      static func forgetPwd_vc_title(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("forgetPwd_vc_title", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "forgetPwd_vc_title"
        }

        return NSLocalizedString("forgetPwd_vc_title", bundle: bundle, comment: "")
      }

      /// en translation: 忘記密碼?
      ///
      /// Locales: en, zh-Hant
      static func login_vc_login_password_forgot(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("login_vc_login_password_forgot", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "login_vc_login_password_forgot"
        }

        return NSLocalizedString("login_vc_login_password_forgot", bundle: bundle, comment: "")
      }

      /// en translation: 性別
      ///
      /// Locales: en, zh-Hant
      static func verify_vc_gender(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("verify_vc_gender", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "verify_vc_gender"
        }

        return NSLocalizedString("verify_vc_gender", bundle: bundle, comment: "")
      }

      /// en translation: 您可以填寫特別傑出的成續或經歷，為自己加分!
      ///
      /// Locales: en, zh-Hant
      static func profile_website_edit_education_intro_placeholder(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("profile_website_edit_education_intro_placeholder", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "profile_website_edit_education_intro_placeholder"
        }

        return NSLocalizedString("profile_website_edit_education_intro_placeholder", bundle: bundle, comment: "")
      }

      /// en translation: 您的密碼必須包含英文、數字 <b>8-20</b> 個字元
      ///
      /// Locales: en, zh-Hant
      static func register_vc_password_hint(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("register_vc_password_hint", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "register_vc_password_hint"
        }

        return NSLocalizedString("register_vc_password_hint", bundle: bundle, comment: "")
      }

      /// en translation: 成員
      ///
      /// Locales: en, zh-Hant
      static func circle_content_top_member_title(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("circle_content_top_member_title", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "circle_content_top_member_title"
        }

        return NSLocalizedString("circle_content_top_member_title", bundle: bundle, comment: "")
      }

      /// en translation: 我建立的
      ///
      /// Locales: en, zh-Hant
      static func circle_vc_created(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("circle_vc_created", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "circle_vc_created"
        }

        return NSLocalizedString("circle_vc_created", bundle: bundle, comment: "")
      }

      /// en translation: 我建立的圈圈
      ///
      /// Locales: en, zh-Hant
      static func profile_list_item_circle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("profile_list_item_circle", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "profile_list_item_circle"
        }

        return NSLocalizedString("profile_list_item_circle", bundle: bundle, comment: "")
      }

      /// en translation: 我的收藏
      ///
      /// Locales: en, zh-Hant
      static func member_list_item_bookmark(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("member_list_item_bookmark", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "member_list_item_bookmark"
        }

        return NSLocalizedString("member_list_item_bookmark", bundle: bundle, comment: "")
      }

      /// en translation: 我的暱稱
      ///
      /// Locales: en, zh-Hant
      static func profile_nickname(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("profile_nickname", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "profile_nickname"
        }

        return NSLocalizedString("profile_nickname", bundle: bundle, comment: "")
      }

      /// en translation: 我的社群
      ///
      /// Locales: en, zh-Hant
      static func profile_list_item_socialMedia(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("profile_list_item_socialMedia", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "profile_list_item_socialMedia"
        }

        return NSLocalizedString("profile_list_item_socialMedia", bundle: bundle, comment: "")
      }

      /// en translation: 我的社群
      ///
      /// Locales: en, zh-Hant
      static func profile_website_edit_social_media_title(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("profile_website_edit_social_media_title", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "profile_website_edit_social_media_title"
        }

        return NSLocalizedString("profile_website_edit_social_media_title", bundle: bundle, comment: "")
      }

      /// en translation: 我的聲量
      ///
      /// Locales: en, zh-Hant
      static func member_list_item_volume(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("member_list_item_volume", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "member_list_item_volume"
        }

        return NSLocalizedString("member_list_item_volume", bundle: bundle, comment: "")
      }

      /// en translation: 我的興趣話題
      ///
      /// Locales: en, zh-Hant
      static func member_list_item_bigcircle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("member_list_item_bigcircle", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "member_list_item_bigcircle"
        }

        return NSLocalizedString("member_list_item_bigcircle", bundle: bundle, comment: "")
      }

      /// en translation: 我的錢包
      ///
      /// Locales: en, zh-Hant
      static func member_list_item_wallet(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("member_list_item_wallet", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "member_list_item_wallet"
        }

        return NSLocalizedString("member_list_item_wallet", bundle: bundle, comment: "")
      }

      /// en translation: 我追蹤的Tag
      ///
      /// Locales: en, zh-Hant
      static func profile_list_item_tag(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("profile_list_item_tag", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "profile_list_item_tag"
        }

        return NSLocalizedString("profile_list_item_tag", bundle: bundle, comment: "")
      }

      /// en translation: 或
      ///
      /// Locales: en, zh-Hant
      static func login_vc_login_mid_label(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("login_vc_login_mid_label", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "login_vc_login_mid_label"
        }

        return NSLocalizedString("login_vc_login_mid_label", bundle: bundle, comment: "")
      }

      /// en translation: 手機安全認證
      ///
      /// Locales: en, zh-Hant
      static func verify_vc_phone_title(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("verify_vc_phone_title", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "verify_vc_phone_title"
        }

        return NSLocalizedString("verify_vc_phone_title", bundle: bundle, comment: "")
      }

      /// en translation: 手機號碼
      ///
      /// Locales: en, zh-Hant
      static func forgetPwd_vc_phone_title(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("forgetPwd_vc_phone_title", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "forgetPwd_vc_phone_title"
        }

        return NSLocalizedString("forgetPwd_vc_phone_title", bundle: bundle, comment: "")
      }

      /// en translation: 打賞記錄
      ///
      /// Locales: en, zh-Hant
      static func member_list_item_gift(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("member_list_item_gift", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "member_list_item_gift"
        }

        return NSLocalizedString("member_list_item_gift", bundle: bundle, comment: "")
      }

      /// en translation: 排序
      ///
      /// Locales: en, zh-Hant
      static func circle_vc_sort_button(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("circle_vc_sort_button", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "circle_vc_sort_button"
        }

        return NSLocalizedString("circle_vc_sort_button", bundle: bundle, comment: "")
      }

      /// en translation: 探索
      ///
      /// Locales: en, zh-Hant
      static func tool_bar_home(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("tool_bar_home", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "tool_bar_home"
        }

        return NSLocalizedString("tool_bar_home", bundle: bundle, comment: "")
      }

      /// en translation: 提出申請
      ///
      /// Locales: en, zh-Hant
      static func circle_create_vc_circle_verify_apply(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("circle_create_vc_circle_verify_apply", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "circle_create_vc_circle_verify_apply"
        }

        return NSLocalizedString("circle_create_vc_circle_verify_apply", bundle: bundle, comment: "")
      }

      /// en translation: 搜尋不到，加入才能看內容
      ///
      /// Locales: en, zh-Hant
      static func circle_create_vc_circle_privacy_private_description(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("circle_create_vc_circle_privacy_private_description", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "circle_create_vc_circle_privacy_private_description"
        }

        return NSLocalizedString("circle_create_vc_circle_privacy_private_description", bundle: bundle, comment: "")
      }

      /// en translation: 搜尋得到，加入才能看內容
      ///
      /// Locales: en, zh-Hant
      static func circle_create_vc_circle_privacy_optional_description(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("circle_create_vc_circle_privacy_optional_description", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "circle_create_vc_circle_privacy_optional_description"
        }

        return NSLocalizedString("circle_create_vc_circle_privacy_optional_description", bundle: bundle, comment: "")
      }

      /// en translation: 支持你創作 優質內容的動力
      ///
      /// Locales: en, zh-Hant
      static func leading_tutorial_feature_text_2(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("leading_tutorial_feature_text_2", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "leading_tutorial_feature_text_2"
        }

        return NSLocalizedString("leading_tutorial_feature_text_2", bundle: bundle, comment: "")
      }

      /// en translation: 支援與幫助
      ///
      /// Locales: en, zh-Hant
      static func member_list_item_help(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("member_list_item_help", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "member_list_item_help"
        }

        return NSLocalizedString("member_list_item_help", bundle: bundle, comment: "")
      }

      /// en translation: 教育程度
      ///
      /// Locales: en, zh-Hant
      static func profile_website_edit_education_level(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("profile_website_edit_education_level", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "profile_website_edit_education_level"
        }

        return NSLocalizedString("profile_website_edit_education_level", bundle: bundle, comment: "")
      }

      /// en translation: 教育背景
      ///
      /// Locales: en, zh-Hant
      static func profile_list_item_education(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("profile_list_item_education", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "profile_list_item_education"
        }

        return NSLocalizedString("profile_list_item_education", bundle: bundle, comment: "")
      }

      /// en translation: 教育背景
      ///
      /// Locales: en, zh-Hant
      static func profile_website_edit_education_title(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("profile_website_edit_education_title", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "profile_website_edit_education_title"
        }

        return NSLocalizedString("profile_website_edit_education_title", bundle: bundle, comment: "")
      }

      /// en translation: 新增
      ///
      /// Locales: en, zh-Hant
      static func profile_website_edit_social_media_add(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("profile_website_edit_social_media_add", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "profile_website_edit_social_media_add"
        }

        return NSLocalizedString("profile_website_edit_social_media_add", bundle: bundle, comment: "")
      }

      /// en translation: 是否要為圈圈正名？
      ///
      /// Locales: en, zh-Hant
      static func circle_create_vc_circle_verify_title(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("circle_create_vc_circle_verify_title", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "circle_create_vc_circle_verify_title"
        }

        return NSLocalizedString("circle_create_vc_circle_verify_title", bundle: bundle, comment: "")
      }

      /// en translation: 暫時不要
      ///
      /// Locales: en, zh-Hant
      static func circle_create_vc_circle_verify_cancel(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("circle_create_vc_circle_verify_cancel", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "circle_create_vc_circle_verify_cancel"
        }

        return NSLocalizedString("circle_create_vc_circle_verify_cancel", bundle: bundle, comment: "")
      }

      /// en translation: 暱稱
      ///
      /// Locales: en, zh-Hant
      static func profile_edit_nickname_title(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("profile_edit_nickname_title", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "profile_edit_nickname_title"
        }

        return NSLocalizedString("profile_edit_nickname_title", bundle: bundle, comment: "")
      }

      /// en translation: 會員
      ///
      /// Locales: en, zh-Hant
      static func tool_bar_member(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("tool_bar_member", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "tool_bar_member"
        }

        return NSLocalizedString("tool_bar_member", bundle: bundle, comment: "")
      }

      /// en translation: 朋友
      ///
      /// Locales: en, zh-Hant
      static func member_info_friend_title(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("member_info_friend_title", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "member_info_friend_title"
        }

        return NSLocalizedString("member_info_friend_title", bundle: bundle, comment: "")
      }

      /// en translation: 標題
      ///
      /// Locales: en, zh-Hant
      static func profile_website_edit_web_title(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("profile_website_edit_web_title", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "profile_website_edit_web_title"
        }

        return NSLocalizedString("profile_website_edit_web_title", bundle: bundle, comment: "")
      }

      /// en translation: 檔案
      ///
      /// Locales: en, zh-Hant
      static func circle_content_top_files(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("circle_content_top_files", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "circle_content_top_files"
        }

        return NSLocalizedString("circle_content_top_files", bundle: bundle, comment: "")
      }

      /// en translation: 歡迎加入我們
      ///
      /// Locales: en, zh-Hant
      static func register_vc_subtitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("register_vc_subtitle", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "register_vc_subtitle"
        }

        return NSLocalizedString("register_vc_subtitle", bundle: bundle, comment: "")
      }

      /// en translation: 正名只需 <b>3</b> 步驟
      ///
      /// Locales: en, zh-Hant
      static func circle_create_vc_circle_verify_step_title(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("circle_create_vc_circle_verify_step_title", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "circle_create_vc_circle_verify_step_title"
        }

        return NSLocalizedString("circle_create_vc_circle_verify_step_title", bundle: bundle, comment: "")
      }

      /// en translation: 正名通過後，您將可以選擇 <b>贊助制、訂閱制</b> 來支持你的創作
      ///
      /// Locales: en, zh-Hant
      static func circle_create_vc_circle_verify_description(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("circle_create_vc_circle_verify_description", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "circle_create_vc_circle_verify_description"
        }

        return NSLocalizedString("circle_create_vc_circle_verify_description", bundle: bundle, comment: "")
      }

      /// en translation: 此圈圈的內容，為成未滿18歲不得瀏覽之內容。
      ///
      /// Locales: en, zh-Hant
      static func circle_create_vc_circle_18y_limit(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("circle_create_vc_circle_18y_limit", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "circle_create_vc_circle_18y_limit"
        }

        return NSLocalizedString("circle_create_vc_circle_18y_limit", bundle: bundle, comment: "")
      }

      /// en translation: 沒收到驗證碼? 重新傳送
      ///
      /// Locales: en, zh-Hant
      static func verify_vc_resend_with_button(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("verify_vc_resend_with_button", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "verify_vc_resend_with_button"
        }

        return NSLocalizedString("verify_vc_resend_with_button", bundle: bundle, comment: "")
      }

      /// en translation: 準備開始
      ///
      /// Locales: en, zh-Hant
      static func leading_ready_to_begin(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("leading_ready_to_begin", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "leading_ready_to_begin"
        }

        return NSLocalizedString("leading_ready_to_begin", bundle: bundle, comment: "")
      }

      /// en translation: 為你的圈圈取名子
      ///
      /// Locales: en, zh-Hant
      static func circle_create_vc_circle_name_placeholder(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("circle_create_vc_circle_name_placeholder", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "circle_create_vc_circle_name_placeholder"
        }

        return NSLocalizedString("circle_create_vc_circle_name_placeholder", bundle: bundle, comment: "")
      }

      /// en translation: 無論對什麼有興趣，Meta Circle都有！ 點選以下話題來追蹤最新討論。
      ///
      /// Locales: en, zh-Hant
      static func topic_options_subtitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("topic_options_subtitle", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "topic_options_subtitle"
        }

        return NSLocalizedString("topic_options_subtitle", bundle: bundle, comment: "")
      }

      /// en translation: 生日
      ///
      /// Locales: en, zh-Hant
      static func verify_vc_birth(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("verify_vc_birth", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "verify_vc_birth"
        }

        return NSLocalizedString("verify_vc_birth", bundle: bundle, comment: "")
      }

      /// en translation: 男性
      ///
      /// Locales: en, zh-Hant
      static func verify_vc_gender_male(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("verify_vc_gender_male", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "verify_vc_gender_male"
        }

        return NSLocalizedString("verify_vc_gender_male", bundle: bundle, comment: "")
      }

      /// en translation: 畢業
      ///
      /// Locales: en, zh-Hant
      static func profile_website_edit_education_graduate(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("profile_website_edit_education_graduate", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "profile_website_edit_education_graduate"
        }

        return NSLocalizedString("profile_website_edit_education_graduate", bundle: bundle, comment: "")
      }

      /// en translation: 略過
      ///
      /// Locales: en, zh-Hant
      static func circle_create_vc_circle_profile_skip(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("circle_create_vc_circle_profile_skip", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "circle_create_vc_circle_profile_skip"
        }

        return NSLocalizedString("circle_create_vc_circle_profile_skip", bundle: bundle, comment: "")
      }

      /// en translation: 略過
      ///
      /// Locales: en, zh-Hant
      static func leading_skip(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("leading_skip", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "leading_skip"
        }

        return NSLocalizedString("leading_skip", bundle: bundle, comment: "")
      }

      /// en translation: 登入
      ///
      /// Locales: en, zh-Hant
      static func login_vc_login_button(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("login_vc_login_button", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "login_vc_login_button"
        }

        return NSLocalizedString("login_vc_login_button", bundle: bundle, comment: "")
      }

      /// en translation: 登入
      ///
      /// Locales: en, zh-Hant
      static func login_vc_title(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("login_vc_title", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "login_vc_title"
        }

        return NSLocalizedString("login_vc_title", bundle: bundle, comment: "")
      }

      /// en translation: 登入
      ///
      /// Locales: en, zh-Hant
      static func register_vc_login_button(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("register_vc_login_button", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "register_vc_login_button"
        }

        return NSLocalizedString("register_vc_login_button", bundle: bundle, comment: "")
      }

      /// en translation: 登入
      ///
      /// Locales: en, zh-Hant
      static func tool_bar_login(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("tool_bar_login", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "tool_bar_login"
        }

        return NSLocalizedString("tool_bar_login", bundle: bundle, comment: "")
      }

      /// en translation: 登出
      ///
      /// Locales: en, zh-Hant
      static func member_list_item_logout(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("member_list_item_logout", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "member_list_item_logout"
        }

        return NSLocalizedString("member_list_item_logout", bundle: bundle, comment: "")
      }

      /// en translation: 相簿
      ///
      /// Locales: en, zh-Hant
      static func circle_content_top_album(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("circle_content_top_album", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "circle_content_top_album"
        }

        return NSLocalizedString("circle_content_top_album", bundle: bundle, comment: "")
      }

      /// en translation: 確定
      ///
      /// Locales: en, zh-Hant
      static func confirm(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("confirm", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "confirm"
        }

        return NSLocalizedString("confirm", bundle: bundle, comment: "")
      }

      /// en translation: 私密
      ///
      /// Locales: en, zh-Hant
      static func circle_create_vc_circle_privacy_private(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("circle_create_vc_circle_privacy_private", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "circle_create_vc_circle_privacy_private"
        }

        return NSLocalizedString("circle_create_vc_circle_privacy_private", bundle: bundle, comment: "")
      }

      /// en translation: 私訊
      ///
      /// Locales: en, zh-Hant
      static func tool_bar_message(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("tool_bar_message", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "tool_bar_message"
        }

        return NSLocalizedString("tool_bar_message", bundle: bundle, comment: "")
      }

      /// en translation: 科系名稱
      ///
      /// Locales: en, zh-Hant
      static func profile_website_edit_education_department_name(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("profile_website_edit_education_department_name", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "profile_website_edit_education_department_name"
        }

        return NSLocalizedString("profile_website_edit_education_department_name", bundle: bundle, comment: "")
      }

      /// en translation: 立即註冊
      ///
      /// Locales: en, zh-Hant
      static func login_vc_register_button(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("login_vc_register_button", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "login_vc_register_button"
        }

        return NSLocalizedString("login_vc_register_button", bundle: bundle, comment: "")
      }

      /// en translation: 第三性
      ///
      /// Locales: en, zh-Hant
      static func verify_vc_gender_intersex(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("verify_vc_gender_intersex", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "verify_vc_gender_intersex"
        }

        return NSLocalizedString("verify_vc_gender_intersex", bundle: bundle, comment: "")
      }

      /// en translation: 簡介
      ///
      /// Locales: en, zh-Hant
      static func circle_content_top_info(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("circle_content_top_info", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "circle_content_top_info"
        }

        return NSLocalizedString("circle_content_top_info", bundle: bundle, comment: "")
      }

      /// en translation: 簡介
      ///
      /// Locales: en, zh-Hant
      static func circle_create_vc_circle_profile_title(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("circle_create_vc_circle_profile_title", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "circle_create_vc_circle_profile_title"
        }

        return NSLocalizedString("circle_create_vc_circle_profile_title", bundle: bundle, comment: "")
      }

      /// en translation: 簡介橫幅
      ///
      /// Locales: en, zh-Hant
      static func circle_create_vc_circle_profile_banner(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("circle_create_vc_circle_profile_banner", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "circle_create_vc_circle_profile_banner"
        }

        return NSLocalizedString("circle_create_vc_circle_profile_banner", bundle: bundle, comment: "")
      }

      /// en translation: 結束
      ///
      /// Locales: en, zh-Hant
      static func profile_website_edit_education_end(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("profile_website_edit_education_end", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "profile_website_edit_education_end"
        }

        return NSLocalizedString("profile_website_edit_education_end", bundle: bundle, comment: "")
      }

      /// en translation: 網址
      ///
      /// Locales: en, zh-Hant
      static func profile_website_edit_web_url_title(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("profile_website_edit_web_url_title", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "profile_website_edit_web_url_title"
        }

        return NSLocalizedString("profile_website_edit_web_url_title", bundle: bundle, comment: "")
      }

      /// en translation: 網路內容分級
      ///
      /// Locales: en, zh-Hant
      static func circle_create_vc_circle_level(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("circle_create_vc_circle_level", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "circle_create_vc_circle_level"
        }

        return NSLocalizedString("circle_create_vc_circle_level", bundle: bundle, comment: "")
      }

      /// en translation: 編輯基本資料
      ///
      /// Locales: en, zh-Hant
      static func profile_edit_title(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("profile_edit_title", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "profile_edit_title"
        }

        return NSLocalizedString("profile_edit_title", bundle: bundle, comment: "")
      }

      /// en translation: 編輯檔案
      ///
      /// Locales: en, zh-Hant
      static func member_profile_edit_file(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("member_profile_edit_file", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "member_profile_edit_file"
        }

        return NSLocalizedString("member_profile_edit_file", bundle: bundle, comment: "")
      }

      /// en translation: 置頂
      ///
      /// Locales: en, zh-Hant
      static func circle_content_category_pin(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("circle_content_category_pin", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "circle_content_category_pin"
        }

        return NSLocalizedString("circle_content_category_pin", bundle: bundle, comment: "")
      }

      /// en translation: 職涯空檔
      ///
      /// Locales: en, zh-Hant
      static func profile_list_item_careerBreak(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("profile_list_item_careerBreak", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "profile_list_item_careerBreak"
        }

        return NSLocalizedString("profile_list_item_careerBreak", bundle: bundle, comment: "")
      }

      /// en translation: 肄業
      ///
      /// Locales: en, zh-Hant
      static func profile_website_edit_education_quit(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("profile_website_edit_education_quit", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "profile_website_edit_education_quit"
        }

        return NSLocalizedString("profile_website_edit_education_quit", bundle: bundle, comment: "")
      }

      /// en translation: 至少3項
      ///
      /// Locales: en, zh-Hant
      static func topic_options_count_label(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("topic_options_count_label", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "topic_options_count_label"
        }

        return NSLocalizedString("topic_options_count_label", bundle: bundle, comment: "")
      }

      /// en translation: 行程
      ///
      /// Locales: en, zh-Hant
      static func circle_content_top_calendar(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("circle_content_top_calendar", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "circle_content_top_calendar"
        }

        return NSLocalizedString("circle_content_top_calendar", bundle: bundle, comment: "")
      }

      /// en translation: 訂閱
      ///
      /// Locales: en, zh-Hant
      static func circle_content_top_subscribe(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("circle_content_top_subscribe", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "circle_content_top_subscribe"
        }

        return NSLocalizedString("circle_content_top_subscribe", bundle: bundle, comment: "")
      }

      /// en translation: 討論區
      ///
      /// Locales: en, zh-Hant
      static func circle_content_category_forum(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("circle_content_category_forum", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "circle_content_category_forum"
        }

        return NSLocalizedString("circle_content_category_forum", bundle: bundle, comment: "")
      }

      /// en translation: 設定
      ///
      /// Locales: en, zh-Hant
      static func member_list_item_setting(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("member_list_item_setting", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "member_list_item_setting"
        }

        return NSLocalizedString("member_list_item_setting", bundle: bundle, comment: "")
      }

      /// en translation: 設定密碼
      ///
      /// Locales: en, zh-Hant
      static func register_vc_register_password_title(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("register_vc_register_password_title", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "register_vc_register_password_title"
        }

        return NSLocalizedString("register_vc_register_password_title", bundle: bundle, comment: "")
      }

      /// en translation: 設定密碼
      ///
      /// Locales: en, zh-Hant
      static func resetPwd_vc_pwd_title(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("resetPwd_vc_pwd_title", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "resetPwd_vc_pwd_title"
        }

        return NSLocalizedString("resetPwd_vc_pwd_title", bundle: bundle, comment: "")
      }

      /// en translation: 註冊
      ///
      /// Locales: en, zh-Hant
      static func register_vc_title(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("register_vc_title", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "register_vc_title"
        }

        return NSLocalizedString("register_vc_title", bundle: bundle, comment: "")
      }

      /// en translation: 話題
      ///
      /// Locales: en, zh-Hant
      static func tool_bar_big_circle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("tool_bar_big_circle", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "tool_bar_big_circle"
        }

        return NSLocalizedString("tool_bar_big_circle", bundle: bundle, comment: "")
      }

      /// en translation: 請填寫個人資料
      ///
      /// Locales: en, zh-Hant
      static func verify_vc_succeed_subtitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("verify_vc_succeed_subtitle", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "verify_vc_succeed_subtitle"
        }

        return NSLocalizedString("verify_vc_succeed_subtitle", bundle: bundle, comment: "")
      }

      /// en translation: 請輸入手機號碼與生日，讓我們確認身份與傳送驗證信，方便您重新設定密碼。
      ///
      /// Locales: en, zh-Hant
      static func forgetPwd_vc_subtitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("forgetPwd_vc_subtitle", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "forgetPwd_vc_subtitle"
        }

        return NSLocalizedString("forgetPwd_vc_subtitle", bundle: bundle, comment: "")
      }

      /// en translation: 請輸入電話號碼，我們將做為增加帳號的 安全性，及取回密碼時使用。
      ///
      /// Locales: en, zh-Hant
      static func verify_vc_phone_subtitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("verify_vc_phone_subtitle", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "verify_vc_phone_subtitle"
        }

        return NSLocalizedString("verify_vc_phone_subtitle", bundle: bundle, comment: "")
      }

      /// en translation: 請選擇
      ///
      /// Locales: en, zh-Hant
      static func circle_create_vc_circle_category_placeholder(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("circle_create_vc_circle_category_placeholder", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "circle_create_vc_circle_category_placeholder"
        }

        return NSLocalizedString("circle_create_vc_circle_category_placeholder", bundle: bundle, comment: "")
      }

      /// en translation: 請選擇
      ///
      /// Locales: en, zh-Hant
      static func profile_website_edit_education_please_select(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("profile_website_edit_education_please_select", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "profile_website_edit_education_please_select"
        }

        return NSLocalizedString("profile_website_edit_education_please_select", bundle: bundle, comment: "")
      }

      /// en translation: 請選擇
      ///
      /// Locales: en, zh-Hant
      static func verify_vc_gender_placeholder(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("verify_vc_gender_placeholder", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "verify_vc_gender_placeholder"
        }

        return NSLocalizedString("verify_vc_gender_placeholder", bundle: bundle, comment: "")
      }

      /// en translation: 貼文草稿
      ///
      /// Locales: en, zh-Hant
      static func member_list_item_draft(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("member_list_item_draft", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "member_list_item_draft"
        }

        return NSLocalizedString("member_list_item_draft", bundle: bundle, comment: "")
      }

      /// en translation: 贊助
      ///
      /// Locales: en, zh-Hant
      static func circle_content_top_sponsor(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("circle_content_top_sponsor", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "circle_content_top_sponsor"
        }

        return NSLocalizedString("circle_content_top_sponsor", bundle: bundle, comment: "")
      }

      /// en translation: 輸入密碼
      ///
      /// Locales: en, zh-Hant
      static func login_vc_login_password_placeholder(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("login_vc_login_password_placeholder", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "login_vc_login_password_placeholder"
        }

        return NSLocalizedString("login_vc_login_password_placeholder", bundle: bundle, comment: "")
      }

      /// en translation: 輸入密碼
      ///
      /// Locales: en, zh-Hant
      static func resetPwd_vc_password_placeholder(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("resetPwd_vc_password_placeholder", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "resetPwd_vc_password_placeholder"
        }

        return NSLocalizedString("resetPwd_vc_password_placeholder", bundle: bundle, comment: "")
      }

      /// en translation: 輸入手機號碼
      ///
      /// Locales: en, zh-Hant
      static func verify_vc_phone_placeholder(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("verify_vc_phone_placeholder", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "verify_vc_phone_placeholder"
        }

        return NSLocalizedString("verify_vc_phone_placeholder", bundle: bundle, comment: "")
      }

      /// en translation: 輸入網址URL
      ///
      /// Locales: en, zh-Hant
      static func profile_website_edit_web_url_placeholder(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("profile_website_edit_web_url_placeholder", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "profile_website_edit_web_url_placeholder"
        }

        return NSLocalizedString("profile_website_edit_web_url_placeholder", bundle: bundle, comment: "")
      }

      /// en translation: 輸入電子郵件
      ///
      /// Locales: en, zh-Hant
      static func login_vc_login_mail_placeholder(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("login_vc_login_mail_placeholder", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "login_vc_login_mail_placeholder"
        }

        return NSLocalizedString("login_vc_login_mail_placeholder", bundle: bundle, comment: "")
      }

      /// en translation: 追蹤Tag管理
      ///
      /// Locales: en, zh-Hant
      static func member_list_item_tag(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("member_list_item_tag", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "member_list_item_tag"
        }

        return NSLocalizedString("member_list_item_tag", bundle: bundle, comment: "")
      }

      /// en translation: 選擇生日
      ///
      /// Locales: en, zh-Hant
      static func verify_vc_birth_selection(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("verify_vc_birth_selection", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "verify_vc_birth_selection"
        }

        return NSLocalizedString("verify_vc_birth_selection", bundle: bundle, comment: "")
      }

      /// en translation: 邀請
      ///
      /// Locales: en, zh-Hant
      static func circle_content_top_invite(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("circle_content_top_invite", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "circle_content_top_invite"
        }

        return NSLocalizedString("circle_content_top_invite", bundle: bundle, comment: "")
      }

      /// en translation: 還不是會員 ? 立即註冊
      ///
      /// Locales: en, zh-Hant
      static func login_vc_register_label(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("login_vc_register_label", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "login_vc_register_label"
        }

        return NSLocalizedString("login_vc_register_label", bundle: bundle, comment: "")
      }

      /// en translation: 部份公開
      ///
      /// Locales: en, zh-Hant
      static func circle_create_vc_circle_privacy_optional(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("circle_create_vc_circle_privacy_optional", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "circle_create_vc_circle_privacy_optional"
        }

        return NSLocalizedString("circle_create_vc_circle_privacy_optional", bundle: bundle, comment: "")
      }

      /// en translation: 重新傳送
      ///
      /// Locales: en, zh-Hant
      static func verify_vc_resend_button(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("verify_vc_resend_button", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "verify_vc_resend_button"
        }

        return NSLocalizedString("verify_vc_resend_button", bundle: bundle, comment: "")
      }

      /// en translation: 重新傳送驗證碼 <b>%@</b>
      ///
      /// Locales: en, zh-Hant
      static func verify_vc_resend(_ value1: String, preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          let format = NSLocalizedString("verify_vc_resend", bundle: hostingBundle, comment: "")
          return String(format: format, locale: applicationLocale, value1)
        }

        guard let (locale, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "verify_vc_resend"
        }

        let format = NSLocalizedString("verify_vc_resend", bundle: bundle, comment: "")
        return String(format: format, locale: locale, value1)
      }

      /// en translation: 重新設定密碼
      ///
      /// Locales: en, zh-Hant
      static func resetPwd_vc_title(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("resetPwd_vc_title", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "resetPwd_vc_title"
        }

        return NSLocalizedString("resetPwd_vc_title", bundle: bundle, comment: "")
      }

      /// en translation: 重設
      ///
      /// Locales: en, zh-Hant
      static func profile_edit_reset(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("profile_edit_reset", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "profile_edit_reset"
        }

        return NSLocalizedString("profile_edit_reset", bundle: bundle, comment: "")
      }

      /// en translation: 長度需為 8-20 個字元
      ///
      /// Locales: en, zh-Hant
      static func register_vc_password_hint2(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("register_vc_password_hint2", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "register_vc_password_hint2"
        }

        return NSLocalizedString("register_vc_password_hint2", bundle: bundle, comment: "")
      }

      /// en translation: 開始
      ///
      /// Locales: en, zh-Hant
      static func profile_website_edit_education_start(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("profile_website_edit_education_start", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "profile_website_edit_education_start"
        }

        return NSLocalizedString("profile_website_edit_education_start", bundle: bundle, comment: "")
      }

      /// en translation: 開始體驗
      ///
      /// Locales: en, zh-Hant
      static func leading_tutorial_begin(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("leading_tutorial_begin", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "leading_tutorial_begin"
        }

        return NSLocalizedString("leading_tutorial_begin", bundle: bundle, comment: "")
      }

      /// en translation: 閱讀更多
      ///
      /// Locales: en, zh-Hant
      static func circle_content_read_more(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("circle_content_read_more", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "circle_content_read_more"
        }

        return NSLocalizedString("circle_content_read_more", bundle: bundle, comment: "")
      }

      /// en translation: 隱私設定
      ///
      /// Locales: en, zh-Hant
      static func circle_create_vc_circle_privacy(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("circle_create_vc_circle_privacy", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "circle_create_vc_circle_privacy"
        }

        return NSLocalizedString("circle_create_vc_circle_privacy", bundle: bundle, comment: "")
      }

      /// en translation: 電子郵件
      ///
      /// Locales: en, zh-Hant
      static func login_vc_login_mail_title(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("login_vc_login_mail_title", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "login_vc_login_mail_title"
        }

        return NSLocalizedString("login_vc_login_mail_title", bundle: bundle, comment: "")
      }

      /// en translation: 需包含英文與數字
      ///
      /// Locales: en, zh-Hant
      static func register_vc_password_hint3(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("register_vc_password_hint3", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "register_vc_password_hint3"
        }

        return NSLocalizedString("register_vc_password_hint3", bundle: bundle, comment: "")
      }

      /// en translation: 類別
      ///
      /// Locales: en, zh-Hant
      static func circle_create_vc_circle_category(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("circle_create_vc_circle_category", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "circle_create_vc_circle_category"
        }

        return NSLocalizedString("circle_create_vc_circle_category", bundle: bundle, comment: "")
      }

      /// en translation: 驗證完成!
      ///
      /// Locales: en, zh-Hant
      static func verify_vc_succeed_title(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("verify_vc_succeed_title", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "verify_vc_succeed_title"
        }

        return NSLocalizedString("verify_vc_succeed_title", bundle: bundle, comment: "")
      }

      /// en translation: 驗證成功
      ///
      /// Locales: en, zh-Hant
      static func resetPwd_vc_verify_succeed_hint(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("resetPwd_vc_verify_succeed_hint", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "resetPwd_vc_verify_succeed_hint"
        }

        return NSLocalizedString("resetPwd_vc_verify_succeed_hint", bundle: bundle, comment: "")
      }

      /// en translation: 驗證碼已傳送至
      ///
      /// Locales: en, zh-Hant
      static func verify_vc_subtitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("verify_vc_subtitle", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "verify_vc_subtitle"
        }

        return NSLocalizedString("verify_vc_subtitle", bundle: bundle, comment: "")
      }

      /// en translation: 驗證電子郵件信箱
      ///
      /// Locales: en, zh-Hant
      static func verify_vc_mail_title(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("verify_vc_mail_title", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "verify_vc_mail_title"
        }

        return NSLocalizedString("verify_vc_mail_title", bundle: bundle, comment: "")
      }

      fileprivate init() {}
    }

    fileprivate init() {}
  }

  fileprivate struct intern: Rswift.Validatable {
    fileprivate static func validate() throws {
      try _R.validate()
    }

    fileprivate init() {}
  }

  fileprivate class Class {}

  fileprivate init() {}
}

struct _R: Rswift.Validatable {
  static func validate() throws {
    #if os(iOS) || os(tvOS)
    try storyboard.validate()
    #endif
  }

  #if os(iOS) || os(tvOS)
  struct storyboard: Rswift.Validatable {
    static func validate() throws {
      #if os(iOS) || os(tvOS)
      try launchScreen.validate()
      #endif
    }

    #if os(iOS) || os(tvOS)
    struct launchScreen: Rswift.StoryboardResourceWithInitialControllerType, Rswift.Validatable {
      typealias InitialController = UIKit.UIViewController

      let bundle = R.hostingBundle
      let launchScreen = StoryboardViewControllerResource<UIKit.UIViewController>(identifier: "LaunchScreen")
      let name = "LaunchScreen"

      func launchScreen(_: Void = ()) -> UIKit.UIViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: launchScreen)
      }

      static func validate() throws {
        if UIKit.UIImage(named: "half_gradient_from_bottom", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'half_gradient_from_bottom' is used in storyboard 'LaunchScreen', but couldn't be loaded.") }
        if UIKit.UIImage(named: "logo", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'logo' is used in storyboard 'LaunchScreen', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
        if _R.storyboard.launchScreen().launchScreen() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'launchScreen' could not be loaded from storyboard 'LaunchScreen' as 'UIKit.UIViewController'.") }
      }

      fileprivate init() {}
    }
    #endif

    fileprivate init() {}
  }
  #endif

  fileprivate init() {}
}
